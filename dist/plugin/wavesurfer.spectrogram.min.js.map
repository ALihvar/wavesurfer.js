{"version":3,"file":"wavesurfer.spectrogram.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/runtime/define property getters","webpack://WaveSurfer/webpack/runtime/hasOwnProperty shorthand","webpack://WaveSurfer/webpack/runtime/make namespace object","webpack://WaveSurfer/./src/plugin/spectrogram/fft.js","webpack://WaveSurfer/./src/plugin/spectrogram/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"spectrogram\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable complexity, no-redeclare, no-var, one-var */\r\n\r\n/**\r\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\r\n *\r\n * @param {Number} bufferSize Buffer size\r\n * @param {Number} sampleRate Sample rate\r\n * @param {Function} windowFunc Window function\r\n * @param {Number} alpha Alpha channel\r\n */\r\nexport default function FFT(bufferSize, sampleRate, windowFunc, alpha) {\r\n    this.bufferSize = bufferSize;\r\n    this.sampleRate = sampleRate;\r\n    this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\r\n\r\n    this.sinTable = new Float32Array(bufferSize);\r\n    this.cosTable = new Float32Array(bufferSize);\r\n    this.windowValues = new Float32Array(bufferSize);\r\n    this.reverseTable = new Uint32Array(bufferSize);\r\n\r\n    this.peakBand = 0;\r\n    this.peak = 0;\r\n\r\n    var i;\r\n    switch (windowFunc) {\r\n        case 'bartlett':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (2 / (bufferSize - 1)) *\r\n                    ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\r\n            }\r\n            break;\r\n        case 'bartlettHann':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.62 -\r\n                    0.48 * Math.abs(i / (bufferSize - 1) - 0.5) -\r\n                    0.38 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'blackman':\r\n            alpha = alpha || 0.16;\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (1 - alpha) / 2 -\r\n                    0.5 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1)) +\r\n                    (alpha / 2) *\r\n                        Math.cos((4 * Math.PI * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'cosine':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = Math.cos(\r\n                    (Math.PI * i) / (bufferSize - 1) - Math.PI / 2\r\n                );\r\n            }\r\n            break;\r\n        case 'gauss':\r\n            alpha = alpha || 0.25;\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = Math.pow(\r\n                    Math.E,\r\n                    -0.5 *\r\n                        Math.pow(\r\n                            (i - (bufferSize - 1) / 2) /\r\n                                ((alpha * (bufferSize - 1)) / 2),\r\n                            2\r\n                        )\r\n                );\r\n            }\r\n            break;\r\n        case 'hamming':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.54 -\r\n                    0.46 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'hann':\r\n        case undefined:\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i) / (bufferSize - 1)));\r\n            }\r\n            break;\r\n        case 'lanczoz':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    Math.sin(Math.PI * ((2 * i) / (bufferSize - 1) - 1)) /\r\n                    (Math.PI * ((2 * i) / (bufferSize - 1) - 1));\r\n            }\r\n            break;\r\n        case 'rectangular':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = 1;\r\n            }\r\n            break;\r\n        case 'triangular':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (2 / bufferSize) *\r\n                    (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\r\n            }\r\n            break;\r\n        default:\r\n            throw Error(\"No such window function '\" + windowFunc + \"'\");\r\n    }\r\n\r\n    var limit = 1;\r\n    var bit = bufferSize >> 1;\r\n    var i;\r\n\r\n    while (limit < bufferSize) {\r\n        for (i = 0; i < limit; i++) {\r\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\r\n        }\r\n\r\n        limit = limit << 1;\r\n        bit = bit >> 1;\r\n    }\r\n\r\n    for (i = 0; i < bufferSize; i++) {\r\n        this.sinTable[i] = Math.sin(-Math.PI / i);\r\n        this.cosTable[i] = Math.cos(-Math.PI / i);\r\n    }\r\n\r\n    this.calculateSpectrum = function(buffer) {\r\n        // Locally scope variables for speed up\r\n        var bufferSize = this.bufferSize,\r\n            cosTable = this.cosTable,\r\n            sinTable = this.sinTable,\r\n            reverseTable = this.reverseTable,\r\n            real = new Float32Array(bufferSize),\r\n            imag = new Float32Array(bufferSize),\r\n            bSi = 2 / this.bufferSize,\r\n            sqrt = Math.sqrt,\r\n            rval,\r\n            ival,\r\n            mag,\r\n            spectrum = new Float32Array(bufferSize / 2);\r\n\r\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\r\n\r\n        if (Math.pow(2, k) !== bufferSize) {\r\n            throw 'Invalid buffer size, must be a power of 2.';\r\n        }\r\n        if (bufferSize !== buffer.length) {\r\n            throw 'Supplied buffer is not the same size as defined FFT. FFT Size: ' +\r\n                bufferSize +\r\n                ' Buffer Size: ' +\r\n                buffer.length;\r\n        }\r\n\r\n        var halfSize = 1,\r\n            phaseShiftStepReal,\r\n            phaseShiftStepImag,\r\n            currentPhaseShiftReal,\r\n            currentPhaseShiftImag,\r\n            off,\r\n            tr,\r\n            ti,\r\n            tmpReal;\r\n\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            real[i] =\r\n                buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\r\n            imag[i] = 0;\r\n        }\r\n\r\n        while (halfSize < bufferSize) {\r\n            phaseShiftStepReal = cosTable[halfSize];\r\n            phaseShiftStepImag = sinTable[halfSize];\r\n\r\n            currentPhaseShiftReal = 1;\r\n            currentPhaseShiftImag = 0;\r\n\r\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\r\n                var i = fftStep;\r\n\r\n                while (i < bufferSize) {\r\n                    off = i + halfSize;\r\n                    tr =\r\n                        currentPhaseShiftReal * real[off] -\r\n                        currentPhaseShiftImag * imag[off];\r\n                    ti =\r\n                        currentPhaseShiftReal * imag[off] +\r\n                        currentPhaseShiftImag * real[off];\r\n\r\n                    real[off] = real[i] - tr;\r\n                    imag[off] = imag[i] - ti;\r\n                    real[i] += tr;\r\n                    imag[i] += ti;\r\n\r\n                    i += halfSize << 1;\r\n                }\r\n\r\n                tmpReal = currentPhaseShiftReal;\r\n                currentPhaseShiftReal =\r\n                    tmpReal * phaseShiftStepReal -\r\n                    currentPhaseShiftImag * phaseShiftStepImag;\r\n                currentPhaseShiftImag =\r\n                    tmpReal * phaseShiftStepImag +\r\n                    currentPhaseShiftImag * phaseShiftStepReal;\r\n            }\r\n\r\n            halfSize = halfSize << 1;\r\n        }\r\n\r\n        for (var i = 0, N = bufferSize / 2; i < N; i++) {\r\n            rval = real[i];\r\n            ival = imag[i];\r\n            mag = bSi * sqrt(rval * rval + ival * ival);\r\n\r\n            if (mag > this.peak) {\r\n                this.peakBand = i;\r\n                this.peak = mag;\r\n            }\r\n            spectrum[i] = mag;\r\n        }\r\n        return spectrum;\r\n    };\r\n}\r\n","/* eslint-enable complexity, no-redeclare, no-var, one-var */\r\n\r\nimport FFT from './fft';\r\n\r\n/**\r\n * @typedef {Object} SpectrogramPluginParams\r\n * @property {string|HTMLElement} container Selector of element or element in\r\n * which to render\r\n * @property {number} fftSamples=512 Number of samples to fetch to FFT. Must be\r\n * a power of 2.\r\n * @property {boolean} splitChannels=false Render with separate spectrograms for\r\n * the channels of the audio\r\n * @property {boolean} labels Set to true to display frequency labels.\r\n * @property {number} noverlap Size of the overlapping window. Must be <\r\n * fftSamples. Auto deduced from canvas size by default.\r\n * @property {string} windowFunc='hann' The window function to be used. One of\r\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\r\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\r\n * @property {?number} alpha Some window functions have this extra value.\r\n * (Between 0 and 1)\r\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\r\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\r\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\r\n * @property {number} frequencyMin=0 Min frequency to scale spectrogram.\r\n * @property {number} frequencyMax=12000 Max frequency to scale spectrogram.\r\n * Set this to samplerate/2 to draw whole range of spectrogram.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('spectrogram')`\r\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\r\n * Each entry should contain a float between 0 and 1 and specify\r\n * r, g, b, and alpha.\r\n */\r\n\r\n/**\r\n * Render a spectrogram visualisation of the audio.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\r\n *\r\n * // commonjs\r\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\r\n *\r\n * // if you are using <script> tags\r\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     SpectrogramPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class SpectrogramPlugin {\r\n    /**\r\n     * Spectrogram plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {SpectrogramPluginParams} params Parameters used to initialise the plugin\r\n     * @return {PluginDefinition} An object representing the plugin.\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'spectrogram',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            staticProps: {\r\n                FFT: FFT\r\n            },\r\n            instance: SpectrogramPlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n        this.util = ws.util;\r\n\r\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\r\n        this._onScroll = e => {\r\n            this.updateScroll(e);\r\n        };\r\n        this._onRender = () => {\r\n            this.render();\r\n        };\r\n        this._onWrapperClick = e => {\r\n            this._wrapperClickHandler(e);\r\n        };\r\n        this._onReady = () => {\r\n            const drawer = (this.drawer = ws.drawer);\r\n\r\n            this.container =\r\n                'string' == typeof params.container\r\n                    ? document.querySelector(params.container)\r\n                    : params.container;\r\n\r\n            if (!this.container) {\r\n                throw Error('No container for WaveSurfer spectrogram');\r\n            }\r\n            if (params.colorMap) {\r\n                if (params.colorMap.length < 256) {\r\n                    throw new Error('Colormap must contain 256 elements');\r\n                }\r\n                for (let i = 0; i < params.colorMap.length; i++) {\r\n                    const cmEntry = params.colorMap[i];\r\n                    if (cmEntry.length !== 4) {\r\n                        throw new Error(\r\n                            'ColorMap entries must contain 4 values'\r\n                        );\r\n                    }\r\n                }\r\n                this.colorMap = params.colorMap;\r\n            } else {\r\n                this.colorMap = [];\r\n                for (let i = 0; i < 256; i++) {\r\n                    const val = (255 - i) / 256;\r\n                    this.colorMap.push([val, val, val, 1]);\r\n                }\r\n            }\r\n            this.width = drawer.width;\r\n            this.pixelRatio = this.params.pixelRatio || ws.params.pixelRatio;\r\n            this.fftSamples =\r\n                this.params.fftSamples || ws.params.fftSamples || 512;\r\n            this.height = this.fftSamples / 2;\r\n            this.noverlap = params.noverlap;\r\n            this.windowFunc = params.windowFunc;\r\n            this.alpha = params.alpha;\r\n            this.splitChannels = params.splitChannels;\r\n            this.channels = this.splitChannels ? ws.backend.buffer.numberOfChannels : 1;\r\n\r\n            // Getting file's original samplerate is difficult(#1248).\r\n            // So set 12kHz default to render like wavesurfer.js 5.x.\r\n            this.frequencyMin = params.frequencyMin || 0;\r\n            this.frequencyMax = params.frequencyMax || 12000;\r\n\r\n            this.createWrapper();\r\n            this.createCanvas();\r\n            this.render();\r\n\r\n            drawer.wrapper.addEventListener('scroll', this._onScroll);\r\n            ws.on('redraw', this._onRender);\r\n        };\r\n    }\r\n\r\n    init() {\r\n        // Check if wavesurfer is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onReady();\r\n        } else {\r\n            this.wavesurfer.once('ready', this._onReady);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.unAll();\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.wavesurfer.un('redraw', this._onRender);\r\n        this.drawer && this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\r\n        this.wavesurfer = null;\r\n        this.util = null;\r\n        this.params = null;\r\n        if (this.wrapper) {\r\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\r\n            this.wrapper.parentNode.removeChild(this.wrapper);\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    createWrapper() {\r\n        const prevSpectrogram = this.container.querySelector('spectrogram');\r\n        if (prevSpectrogram) {\r\n            this.container.removeChild(prevSpectrogram);\r\n        }\r\n        const wsParams = this.wavesurfer.params;\r\n        this.wrapper = document.createElement('spectrogram');\r\n        // if labels are active\r\n        if (this.params.labels) {\r\n            const labelsEl = (this.labelsEl = document.createElement('canvas'));\r\n            labelsEl.classList.add('spec-labels');\r\n            this.drawer.style(labelsEl, {\r\n                left: 0,\r\n                position: 'absolute',\r\n                zIndex: 9,\r\n                height: `${this.height * this.channels / this.pixelRatio}px`,\r\n                width: `${55 / this.pixelRatio}px`\r\n            });\r\n            this.wrapper.appendChild(labelsEl);\r\n            this.loadLabels(\r\n                'rgba(68,68,68,0.5)',\r\n                '12px',\r\n                '10px',\r\n                '',\r\n                '#fff',\r\n                '#f7f7f7',\r\n                'center',\r\n                '#specLabels'\r\n            );\r\n        }\r\n\r\n        this.drawer.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: `${this.height * this.channels / this.pixelRatio}px`\r\n        });\r\n\r\n        if (wsParams.fillParent || wsParams.scrollParent) {\r\n            this.drawer.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: 'hidden',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n        this.container.appendChild(this.wrapper);\r\n\r\n        this.wrapper.addEventListener('click', this._onWrapperClick);\r\n    }\r\n\r\n    _wrapperClickHandler(event) {\r\n        event.preventDefault();\r\n        const relX = 'offsetX' in event ? event.offsetX : event.layerX;\r\n        this.fireEvent('click', relX / this.width || 0);\r\n    }\r\n\r\n    createCanvas() {\r\n        const canvas = (this.canvas = this.wrapper.appendChild(\r\n            document.createElement('canvas')\r\n        ));\r\n\r\n        this.spectrCc = canvas.getContext('2d');\r\n\r\n        this.util.style(canvas, {\r\n            position: 'absolute',\r\n            zIndex: 4\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.updateCanvasStyle();\r\n\r\n        if (this.frequenciesDataUrl) {\r\n            this.loadFrequenciesData(this.frequenciesDataUrl);\r\n        } else {\r\n            this.getFrequencies(this.drawSpectrogram);\r\n        }\r\n    }\r\n\r\n    updateCanvasStyle() {\r\n        const width = Math.round(this.width / this.pixelRatio) + 'px';\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height * this.channels;\r\n        this.canvas.style.width = width;\r\n    }\r\n\r\n    drawSpectrogram(frequenciesData, my) {\r\n        if (!isNaN(frequenciesData[0][0])) { // data is 1ch [sample, freq] format\r\n            // to [channel, sample, freq] format\r\n            frequenciesData = [frequenciesData];\r\n        }\r\n\r\n        const spectrCc = my.spectrCc;\r\n        const height = my.height;\r\n        const width = my.width;\r\n        const freqFrom = my.buffer.sampleRate / 2;\r\n        const freqMin = my.frequencyMin;\r\n        const freqMax = my.frequencyMax;\r\n\r\n        if (!spectrCc) {\r\n            return;\r\n        }\r\n\r\n        for (let c = 0; c < frequenciesData.length; c++) { // for each channel\r\n            const pixels = my.resample(frequenciesData[c]);\r\n            const imageData = new ImageData(width, height);\r\n\r\n            for (let i = 0; i < pixels.length; i++) {\r\n                for (let j = 0; j < pixels[i].length; j++) {\r\n                    const colorMap = my.colorMap[pixels[i][j]];\r\n                    const redIndex = ((height - j) * width + i) * 4;\r\n                    imageData.data[redIndex] = colorMap[0] * 255;\r\n                    imageData.data[redIndex + 1] = colorMap[1] * 255;\r\n                    imageData.data[redIndex + 2] = colorMap[2] * 255;\r\n                    imageData.data[redIndex + 3] = colorMap[3] * 255;\r\n                }\r\n            }\r\n\r\n            // scale and stack spectrograms\r\n            createImageBitmap(imageData).then(renderer =>\r\n                spectrCc.drawImage(renderer,\r\n                    0, height * (1 - freqMax / freqFrom), // source x, y\r\n                    width, height * (freqMax - freqMin) / freqFrom, // source width, height\r\n                    0, height * c, // destination x, y\r\n                    width, height // destination width, height\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    getFrequencies(callback) {\r\n        const fftSamples = this.fftSamples;\r\n        const buffer = (this.buffer = this.wavesurfer.backend.buffer);\r\n        const channels = this.channels;\r\n\r\n        if (!buffer) {\r\n            this.fireEvent('error', 'Web Audio buffer is not available');\r\n            return;\r\n        }\r\n\r\n        // This may differ from file samplerate. Browser resamples audio.\r\n        const sampleRate = buffer.sampleRate;\r\n        const frequencies = [];\r\n\r\n        let noverlap = this.noverlap;\r\n        if (!noverlap) {\r\n            const uniqueSamplesPerPx = buffer.length / this.canvas.width;\r\n            noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\r\n        }\r\n\r\n        const fft = new FFT(\r\n            fftSamples,\r\n            sampleRate,\r\n            this.windowFunc,\r\n            this.alpha\r\n        );\r\n\r\n        for (let c = 0; c < channels; c++) { // for each channel\r\n            const channelData = buffer.getChannelData(c);\r\n            const channelFreq = [];\r\n            let currentOffset = 0;\r\n\r\n            while (currentOffset + fftSamples < channelData.length) {\r\n                const segment = channelData.slice(\r\n                    currentOffset,\r\n                    currentOffset + fftSamples\r\n                );\r\n                const spectrum = fft.calculateSpectrum(segment);\r\n                const array = new Uint8Array(fftSamples / 2);\r\n                let j;\r\n                for (j = 0; j < fftSamples / 2; j++) {\r\n                    array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\r\n                }\r\n                channelFreq.push(array);\r\n                // channelFreq: [sample, freq]\r\n\r\n                currentOffset += fftSamples - noverlap;\r\n            }\r\n            frequencies.push(channelFreq);\r\n            // frequencies: [channel, sample, freq]\r\n        }\r\n        callback(frequencies, this);\r\n    }\r\n\r\n    loadFrequenciesData(url) {\r\n        const request = this.util.fetchFile({ url: url });\r\n\r\n        request.on('success', data =>\r\n            this.drawSpectrogram(JSON.parse(data), this)\r\n        );\r\n        request.on('error', e => this.fireEvent('error', e));\r\n\r\n        return request;\r\n    }\r\n\r\n    freqType(freq) {\r\n        return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\r\n    }\r\n\r\n    unitType(freq) {\r\n        return freq >= 1000 ? 'KHz' : 'Hz';\r\n    }\r\n\r\n    loadLabels(\r\n        bgFill,\r\n        fontSizeFreq,\r\n        fontSizeUnit,\r\n        fontType,\r\n        textColorFreq,\r\n        textColorUnit,\r\n        textAlign,\r\n        container\r\n    ) {\r\n        const frequenciesHeight = this.height;\r\n        bgFill = bgFill || 'rgba(68,68,68,0)';\r\n        fontSizeFreq = fontSizeFreq || '12px';\r\n        fontSizeUnit = fontSizeUnit || '10px';\r\n        fontType = fontType || 'Helvetica';\r\n        textColorFreq = textColorFreq || '#fff';\r\n        textColorUnit = textColorUnit || '#fff';\r\n        textAlign = textAlign || 'center';\r\n        container = container || '#specLabels';\r\n        const bgWidth = 55;\r\n        const getMaxY = frequenciesHeight || 512;\r\n        const labelIndex = 5 * (getMaxY / 256);\r\n        const freqStart = this.frequencyMin;\r\n        const step = (this.frequencyMax - freqStart) / labelIndex;\r\n\r\n        // prepare canvas element for labels\r\n        const ctx = this.labelsEl.getContext('2d');\r\n        this.labelsEl.height = this.height * this.channels;\r\n        this.labelsEl.width = bgWidth;\r\n\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        for (let c = 0; c < this.channels; c++) { // for each channel\r\n            // fill background\r\n            ctx.fillStyle = bgFill;\r\n            ctx.fillRect(0, c * getMaxY, bgWidth, (1 + c) * getMaxY);\r\n            ctx.fill();\r\n            let i;\r\n\r\n            // render labels\r\n            for (i = 0; i <= labelIndex; i++) {\r\n                ctx.textAlign = textAlign;\r\n                ctx.textBaseline = 'middle';\r\n\r\n                const freq = freqStart + step * i;\r\n                const label = this.freqType(freq);\r\n                const units = this.unitType(freq);\r\n                const yLabelOffset = 2;\r\n                const x = 16;\r\n                let y;\r\n\r\n                if (i == 0) {\r\n                    y = (1 + c) * getMaxY + i - 10;\r\n                    // unit label\r\n                    ctx.fillStyle = textColorUnit;\r\n                    ctx.font = fontSizeUnit + ' ' + fontType;\r\n                    ctx.fillText(units, x + 24, y);\r\n                    // freq label\r\n                    ctx.fillStyle = textColorFreq;\r\n                    ctx.font = fontSizeFreq + ' ' + fontType;\r\n                    ctx.fillText(label, x, y);\r\n                } else {\r\n                    y = (1 + c) * getMaxY - i * 50 + yLabelOffset;\r\n                    // unit label\r\n                    ctx.fillStyle = textColorUnit;\r\n                    ctx.font = fontSizeUnit + ' ' + fontType;\r\n                    ctx.fillText(units, x + 24, y);\r\n                    // freq label\r\n                    ctx.fillStyle = textColorFreq;\r\n                    ctx.font = fontSizeFreq + ' ' + fontType;\r\n                    ctx.fillText(label, x, y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateScroll(e) {\r\n        if (this.wrapper) {\r\n            this.wrapper.scrollLeft = e.target.scrollLeft;\r\n        }\r\n    }\r\n\r\n    resample(oldMatrix) {\r\n        const columnsNumber = this.width;\r\n        const newMatrix = [];\r\n\r\n        const oldPiece = 1 / oldMatrix.length;\r\n        const newPiece = 1 / columnsNumber;\r\n        let i;\r\n\r\n        for (i = 0; i < columnsNumber; i++) {\r\n            const column = new Array(oldMatrix[0].length);\r\n            let j;\r\n\r\n            for (j = 0; j < oldMatrix.length; j++) {\r\n                const oldStart = j * oldPiece;\r\n                const oldEnd = oldStart + oldPiece;\r\n                const newStart = i * newPiece;\r\n                const newEnd = newStart + newPiece;\r\n\r\n                const overlap =\r\n                    oldEnd <= newStart || newEnd <= oldStart\r\n                        ? 0\r\n                        : Math.min(\r\n                            Math.max(oldEnd, newStart),\r\n                            Math.max(newEnd, oldStart)\r\n                        ) -\r\n                        Math.max(\r\n                            Math.min(oldEnd, newStart),\r\n                            Math.min(newEnd, oldStart)\r\n                        );\r\n                let k;\r\n                /* eslint-disable max-depth */\r\n                if (overlap > 0) {\r\n                    for (k = 0; k < oldMatrix[0].length; k++) {\r\n                        if (column[k] == null) {\r\n                            column[k] = 0;\r\n                        }\r\n                        column[k] += (overlap / newPiece) * oldMatrix[j][k];\r\n                    }\r\n                }\r\n                /* eslint-enable max-depth */\r\n            }\r\n\r\n            const intColumn = new Uint8Array(oldMatrix[0].length);\r\n            let m;\r\n\r\n            for (m = 0; m < oldMatrix[0].length; m++) {\r\n                intColumn[m] = column[m];\r\n            }\r\n\r\n            newMatrix.push(intColumn);\r\n        }\r\n\r\n        return newMatrix;\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","FFT","bufferSize","sampleRate","windowFunc","alpha","this","bandwidth","sinTable","Float32Array","cosTable","windowValues","reverseTable","Uint32Array","peakBand","peak","i","Math","abs","cos","PI","pow","E","undefined","sin","Error","limit","bit","calculateSpectrum","buffer","rval","ival","mag","real","imag","bSi","sqrt","spectrum","k","floor","log","LN2","length","phaseShiftStepReal","phaseShiftStepImag","currentPhaseShiftReal","currentPhaseShiftImag","off","tr","ti","tmpReal","halfSize","fftStep","N","SpectrogramPlugin","params","name","deferInit","staticProps","instance","constructor","ws","wavesurfer","util","frequenciesDataUrl","_onScroll","e","updateScroll","_onRender","render","_onWrapperClick","_wrapperClickHandler","_onReady","drawer","container","document","querySelector","colorMap","val","push","width","pixelRatio","fftSamples","height","noverlap","splitChannels","channels","backend","numberOfChannels","frequencyMin","frequencyMax","createWrapper","createCanvas","wrapper","addEventListener","on","init","isReady","once","destroy","unAll","un","removeEventListener","parentNode","removeChild","prevSpectrogram","wsParams","createElement","labels","labelsEl","classList","add","style","left","position","zIndex","appendChild","loadLabels","display","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","overflowY","event","preventDefault","relX","offsetX","layerX","fireEvent","canvas","spectrCc","getContext","updateCanvasStyle","loadFrequenciesData","getFrequencies","drawSpectrogram","round","frequenciesData","my","isNaN","freqFrom","freqMin","freqMax","c","pixels","resample","imageData","ImageData","j","redIndex","data","createImageBitmap","then","renderer","drawImage","callback","frequencies","uniqueSamplesPerPx","max","fft","channelData","getChannelData","channelFreq","currentOffset","segment","slice","array","Uint8Array","log10","url","request","fetchFile","JSON","parse","freqType","freq","toFixed","unitType","bgFill","fontSizeFreq","fontSizeUnit","fontType","textColorFreq","textColorUnit","textAlign","getMaxY","labelIndex","freqStart","step","ctx","fillStyle","fillRect","fill","textBaseline","label","units","yLabelOffset","x","y","font","fillText","scrollLeft","target","oldMatrix","columnsNumber","newMatrix","oldPiece","newPiece","column","Array","oldStart","oldEnd","newStart","newEnd","overlap","min","intColumn","m"],"sourceRoot":""}