{"version":3,"file":"wavesurfer.timeline.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/runtime/define property getters","webpack://WaveSurfer/webpack/runtime/hasOwnProperty shorthand","webpack://WaveSurfer/webpack/runtime/make namespace object","webpack://WaveSurfer/./src/plugin/timeline/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"timeline\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * @typedef {Object} TimelinePluginParams\r\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\r\n * @property {!string|HTMLElement} container CSS selector or HTML element where\r\n * the timeline should be drawn. This is the only required parameter.\r\n * @property {number} notchPercentHeight=90 Height of notches in percent\r\n * @property {string} unlabeledNotchColor='#c0c0c0' The colour of the notches\r\n * that do not have labels\r\n * @property {string} primaryColor='#000' The colour of the main notches\r\n * @property {string} secondaryColor='#c0c0c0' The colour of the secondary\r\n * notches\r\n * @property {string} primaryFontColor='#000' The colour of the labels next to\r\n * the main notches\r\n * @property {string} secondaryFontColor='#000' The colour of the labels next to\r\n * the secondary notches\r\n * @property {number} labelPadding=5 The padding between the label and the notch\r\n * @property {?number} zoomDebounce A debounce timeout to increase rendering\r\n * performance for large files\r\n * @property {string} fontFamily='Arial'\r\n * @property {number} fontSize=10 Font size of labels in pixels\r\n * @property {?number} duration Length of the track in seconds. Overrides\r\n * getDuration() for setting length of timeline\r\n * @property {function} formatTimeCallback (sec, pxPerSec) -> label\r\n * @property {function} timeInterval (pxPerSec) -> seconds between notches\r\n * @property {function} primaryLabelInterval (pxPerSec) -> cadence between\r\n * labels in primary color\r\n * @property {function} secondaryLabelInterval (pxPerSec) -> cadence between\r\n * labels in secondary color\r\n * @property {?number} offset Offset for the timeline start in seconds. May also be\r\n * negative.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('timeline')`\r\n */\r\n\r\n/**\r\n * Adds a timeline to the waveform.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import TimelinePlugin from 'wavesurfer.timeline.js';\r\n *\r\n * // commonjs\r\n * var TimelinePlugin = require('wavesurfer.timeline.js');\r\n *\r\n * // if you are using <script> tags\r\n * var TimelinePlugin = window.WaveSurfer.timeline;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     TimelinePlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class TimelinePlugin {\r\n    /**\r\n     * Timeline plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {TimelinePluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'timeline',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            instance: TimelinePlugin\r\n        };\r\n    }\r\n\r\n    // event handlers\r\n    _onScroll = () => {\r\n        if (this.wrapper && this.drawer.wrapper) {\r\n            this.wrapper.scrollLeft = this.drawer.wrapper.scrollLeft;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _onRedraw = () => this.render();\r\n\r\n    _onReady = () => {\r\n        const ws = this.wavesurfer;\r\n        this.drawer = ws.drawer;\r\n        this.pixelRatio = ws.drawer.params.pixelRatio;\r\n        this.maxCanvasWidth = ws.drawer.maxCanvasWidth || ws.drawer.width;\r\n        this.maxCanvasElementWidth =\r\n            ws.drawer.maxCanvasElementWidth ||\r\n            Math.round(this.maxCanvasWidth / this.pixelRatio);\r\n\r\n        // add listeners\r\n        ws.drawer.wrapper.addEventListener('scroll', this._onScroll);\r\n        ws.on('redraw', this._onRedraw);\r\n        ws.on('zoom', this._onZoom);\r\n\r\n        this.render();\r\n    };\r\n\r\n    /**\r\n     * @param {object} e Click event\r\n     */\r\n    _onWrapperClick = e => {\r\n        e.preventDefault();\r\n        const relX = 'offsetX' in e ? e.offsetX : e.layerX;\r\n        this.fireEvent('click', relX / this.wrapper.scrollWidth || 0);\r\n    };\r\n\r\n    /**\r\n     * Creates an instance of TimelinePlugin.\r\n     *\r\n     * You probably want to use TimelinePlugin.create()\r\n     *\r\n     * @param {TimelinePluginParams} params Plugin parameters\r\n     * @param {object} ws Wavesurfer instance\r\n     */\r\n    constructor(params, ws) {\r\n        this.container =\r\n            'string' == typeof params.container\r\n                ? document.querySelector(params.container)\r\n                : params.container;\r\n\r\n        if (!this.container) {\r\n            throw new Error('No container for wavesurfer timeline');\r\n        }\r\n\r\n        this.wavesurfer = ws;\r\n        this.util = ws.util;\r\n        this.params = Object.assign(\r\n            {},\r\n            {\r\n                height: 20,\r\n                notchPercentHeight: 90,\r\n                labelPadding: 5,\r\n                unlabeledNotchColor: '#c0c0c0',\r\n                primaryColor: '#000',\r\n                secondaryColor: '#c0c0c0',\r\n                primaryFontColor: '#000',\r\n                secondaryFontColor: '#000',\r\n                fontFamily: 'Arial',\r\n                fontSize: 10,\r\n                duration: null,\r\n                zoomDebounce: false,\r\n                formatTimeCallback: this.defaultFormatTimeCallback,\r\n                timeInterval: this.defaultTimeInterval,\r\n                primaryLabelInterval: this.defaultPrimaryLabelInterval,\r\n                secondaryLabelInterval: this.defaultSecondaryLabelInterval,\r\n                offset: 0\r\n            },\r\n            params\r\n        );\r\n\r\n        this.canvases = [];\r\n        this.wrapper = null;\r\n        this.drawer = null;\r\n        this.pixelRatio = null;\r\n        this.maxCanvasWidth = null;\r\n        this.maxCanvasElementWidth = null;\r\n        /**\r\n         * This event handler has to be in the constructor function because it\r\n         * relies on the debounce function which is only available after\r\n         * instantiation\r\n         *\r\n         * Use a debounced function if `params.zoomDebounce` is defined\r\n         *\r\n         * @returns {void}\r\n         */\r\n        this._onZoom = this.params.zoomDebounce\r\n            ? this.wavesurfer.util.debounce(\r\n                () => this.render(),\r\n                this.params.zoomDebounce\r\n            )\r\n            : () => this.render();\r\n    }\r\n\r\n    /**\r\n     * Initialisation function used by the plugin API\r\n     */\r\n    init() {\r\n        // Check if ws is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onReady();\r\n        } else {\r\n            this.wavesurfer.once('ready', this._onReady);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy function used by the plugin API\r\n     */\r\n    destroy() {\r\n        this.unAll();\r\n        this.wavesurfer.un('redraw', this._onRedraw);\r\n        this.wavesurfer.un('zoom', this._onZoom);\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.wavesurfer.drawer.wrapper.removeEventListener(\r\n            'scroll',\r\n            this._onScroll\r\n        );\r\n        if (this.wrapper && this.wrapper.parentNode) {\r\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\r\n            this.wrapper.parentNode.removeChild(this.wrapper);\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a timeline element to wrap the canvases drawn by this plugin\r\n     *\r\n     */\r\n    createWrapper() {\r\n        const wsParams = this.wavesurfer.params;\r\n        this.container.innerHTML = '';\r\n        this.wrapper = this.container.appendChild(\r\n            document.createElement('timeline')\r\n        );\r\n        this.util.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: `${this.params.height}px`\r\n        });\r\n\r\n        if (wsParams.fillParent || wsParams.scrollParent) {\r\n            this.util.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: 'hidden',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n\r\n        this.wrapper.addEventListener('click', this._onWrapperClick);\r\n    }\r\n\r\n    /**\r\n     * Render the timeline (also updates the already rendered timeline)\r\n     *\r\n     */\r\n    render() {\r\n        if (!this.wrapper) {\r\n            this.createWrapper();\r\n        }\r\n        this.updateCanvases();\r\n        this.updateCanvasesPositioning();\r\n        this.renderCanvases();\r\n    }\r\n\r\n    /**\r\n     * Add new timeline canvas\r\n     *\r\n     */\r\n    addCanvas() {\r\n        const canvas = this.wrapper.appendChild(\r\n            document.createElement('canvas')\r\n        );\r\n        this.canvases.push(canvas);\r\n        this.util.style(canvas, {\r\n            position: 'absolute',\r\n            zIndex: 4\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove timeline canvas\r\n     *\r\n     */\r\n    removeCanvas() {\r\n        const canvas = this.canvases.pop();\r\n        canvas.parentElement.removeChild(canvas);\r\n    }\r\n\r\n    /**\r\n     * Make sure the correct of timeline canvas elements exist and are cached in\r\n     * this.canvases\r\n     *\r\n     */\r\n    updateCanvases() {\r\n        const totalWidth = Math.round(this.drawer.wrapper.scrollWidth);\r\n        const requiredCanvases = Math.ceil(\r\n            totalWidth / this.maxCanvasElementWidth\r\n        );\r\n\r\n        while (this.canvases.length < requiredCanvases) {\r\n            this.addCanvas();\r\n        }\r\n\r\n        while (this.canvases.length > requiredCanvases) {\r\n            this.removeCanvas();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions and positioning style for all the timeline canvases\r\n     *\r\n     */\r\n    updateCanvasesPositioning() {\r\n        // cache length for performance\r\n        const canvasesLength = this.canvases.length;\r\n        this.canvases.forEach((canvas, i) => {\r\n            // canvas width is the max element width, or if it is the last the\r\n            // required width\r\n            const canvasWidth =\r\n                i === canvasesLength - 1\r\n                    ? this.drawer.wrapper.scrollWidth -\r\n                      this.maxCanvasElementWidth * (canvasesLength - 1)\r\n                    : this.maxCanvasElementWidth;\r\n            // set dimensions and style\r\n            canvas.width = canvasWidth * this.pixelRatio;\r\n            // on certain pixel ratios the canvas appears cut off at the bottom,\r\n            // therefore leave 1px extra\r\n            canvas.height = (this.params.height + 1) * this.pixelRatio;\r\n            this.util.style(canvas, {\r\n                width: `${canvasWidth}px`,\r\n                height: `${this.params.height}px`,\r\n                left: `${i * this.maxCanvasElementWidth}px`\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render the timeline labels and notches\r\n     *\r\n     */\r\n    renderCanvases() {\r\n        const duration =\r\n            this.params.duration ||\r\n            this.wavesurfer.backend.getDuration();\r\n\r\n        if (duration <= 0) {\r\n            return;\r\n        }\r\n        const wsParams = this.wavesurfer.params;\r\n        const fontSize = this.params.fontSize * wsParams.pixelRatio;\r\n        const totalSeconds = parseInt(duration, 10) + 1;\r\n        const width =\r\n            wsParams.fillParent && !wsParams.scrollParent\r\n                ? this.drawer.getWidth()\r\n                : this.drawer.wrapper.scrollWidth * wsParams.pixelRatio;\r\n        const height1 = this.params.height * this.pixelRatio;\r\n        const height2 =\r\n            this.params.height *\r\n            (this.params.notchPercentHeight / 100) *\r\n            this.pixelRatio;\r\n        const pixelsPerSecond = width / duration;\r\n\r\n        const formatTime = this.params.formatTimeCallback;\r\n        // if parameter is function, call the function with\r\n        // pixelsPerSecond, otherwise simply take the value as-is\r\n        const intervalFnOrVal = option =>\r\n            typeof option === 'function' ? option(pixelsPerSecond) : option;\r\n        const timeInterval = intervalFnOrVal(this.params.timeInterval);\r\n        const primaryLabelInterval = intervalFnOrVal(\r\n            this.params.primaryLabelInterval\r\n        );\r\n        const secondaryLabelInterval = intervalFnOrVal(\r\n            this.params.secondaryLabelInterval\r\n        );\r\n\r\n        let curPixel = pixelsPerSecond * this.params.offset;\r\n        let curSeconds = 0;\r\n        let i;\r\n        // build an array of position data with index, second and pixel data,\r\n        // this is then used multiple times below\r\n        const positioning = [];\r\n\r\n        // render until end in case we have a negative offset\r\n        const renderSeconds = (this.params.offset < 0)\r\n            ? totalSeconds - this.params.offset\r\n            : totalSeconds;\r\n\r\n        for (i = 0; i < renderSeconds / timeInterval; i++) {\r\n            positioning.push([i, curSeconds, curPixel]);\r\n            curSeconds += timeInterval;\r\n            curPixel += pixelsPerSecond * timeInterval;\r\n        }\r\n\r\n        // iterate over each position\r\n        const renderPositions = cb => {\r\n            positioning.forEach(pos => {\r\n                cb(pos[0], pos[1], pos[2]);\r\n            });\r\n        };\r\n\r\n        // render primary labels\r\n        this.setFillStyles(this.params.primaryColor);\r\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\r\n        this.setFillStyles(this.params.primaryFontColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (i % primaryLabelInterval === 0) {\r\n                this.fillRect(curPixel, 0, 1, height1);\r\n                this.fillText(\r\n                    formatTime(curSeconds, pixelsPerSecond),\r\n                    curPixel + this.params.labelPadding * this.pixelRatio,\r\n                    height1\r\n                );\r\n            }\r\n        });\r\n\r\n        // render secondary labels\r\n        this.setFillStyles(this.params.secondaryColor);\r\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\r\n        this.setFillStyles(this.params.secondaryFontColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (i % secondaryLabelInterval === 0) {\r\n                this.fillRect(curPixel, 0, 1, height1);\r\n                this.fillText(\r\n                    formatTime(curSeconds, pixelsPerSecond),\r\n                    curPixel + this.params.labelPadding * this.pixelRatio,\r\n                    height1\r\n                );\r\n            }\r\n        });\r\n\r\n        // render the actual notches (when no labels are used)\r\n        this.setFillStyles(this.params.unlabeledNotchColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (\r\n                i % secondaryLabelInterval !== 0 &&\r\n                i % primaryLabelInterval !== 0\r\n            ) {\r\n                this.fillRect(curPixel, 0, 1, height2);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the canvas fill style\r\n     *\r\n     * @param {DOMString|CanvasGradient|CanvasPattern} fillStyle Fill style to\r\n     * use\r\n     */\r\n    setFillStyles(fillStyle) {\r\n        this.canvases.forEach(canvas => {\r\n            const context = canvas.getContext('2d');\r\n            if (context) {\r\n                context.fillStyle = fillStyle;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the canvas font\r\n     *\r\n     * @param {DOMString} font Font to use\r\n     */\r\n    setFonts(font) {\r\n        this.canvases.forEach(canvas => {\r\n            const context = canvas.getContext('2d');\r\n            if (context) {\r\n                context.font = font;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle on the canvases\r\n     *\r\n     * (it figures out the offset for each canvas)\r\n     *\r\n     * @param {number} x X-position\r\n     * @param {number} y Y-position\r\n     * @param {number} width Width\r\n     * @param {number} height Height\r\n     */\r\n    fillRect(x, y, width, height) {\r\n        this.canvases.forEach((canvas, i) => {\r\n            const leftOffset = i * this.maxCanvasWidth;\r\n\r\n            const intersection = {\r\n                x1: Math.max(x, i * this.maxCanvasWidth),\r\n                y1: y,\r\n                x2: Math.min(x + width, i * this.maxCanvasWidth + canvas.width),\r\n                y2: y + height\r\n            };\r\n\r\n            if (intersection.x1 < intersection.x2) {\r\n                const context = canvas\r\n                    .getContext('2d');\r\n                if (context) {\r\n                    context\r\n                        .fillRect(\r\n                            intersection.x1 - leftOffset,\r\n                            intersection.y1,\r\n                            intersection.x2 - intersection.x1,\r\n                            intersection.y2 - intersection.y1\r\n                        );\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fill a given text on the canvases\r\n     *\r\n     * @param {string} text Text to render\r\n     * @param {number} x X-position\r\n     * @param {number} y Y-position\r\n     */\r\n    fillText(text, x, y) {\r\n        let textWidth;\r\n        let xOffset = 0;\r\n\r\n        this.canvases.forEach(canvas => {\r\n            const context = canvas.getContext('2d');\r\n            if (context) {\r\n                const canvasWidth = context.canvas.width;\r\n\r\n                if (xOffset > x + textWidth) {\r\n                    return;\r\n                }\r\n\r\n                if (xOffset + canvasWidth > x && context) {\r\n                    textWidth = context.measureText(text).width;\r\n                    context.fillText(text, x - xOffset, y);\r\n                }\r\n\r\n                xOffset += canvasWidth;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Turn the time into a suitable label for the time.\r\n     *\r\n     * @param {number} seconds Seconds to format\r\n     * @param {number} pxPerSec Pixels per second\r\n     * @returns {number} Time\r\n     */\r\n    defaultFormatTimeCallback(seconds, pxPerSec) {\r\n        if (seconds / 60 > 1) {\r\n            // calculate minutes and seconds from seconds count\r\n            const minutes = parseInt(seconds / 60, 10);\r\n            seconds = parseInt(seconds % 60, 10);\r\n            // fill up seconds with zeroes\r\n            seconds = seconds < 10 ? '0' + seconds : seconds;\r\n            return `${minutes}:${seconds}`;\r\n        }\r\n        return Math.round(seconds * 1000) / 1000;\r\n    }\r\n\r\n    /**\r\n     * Return how many seconds should be between each notch\r\n     *\r\n     * @param {number} pxPerSec Pixels per second\r\n     * @returns {number} Time\r\n     */\r\n    defaultTimeInterval(pxPerSec) {\r\n        if (pxPerSec >= 25) {\r\n            return 1;\r\n        } else if (pxPerSec * 5 >= 25) {\r\n            return 5;\r\n        } else if (pxPerSec * 15 >= 25) {\r\n            return 15;\r\n        }\r\n        return Math.ceil(0.5 / pxPerSec) * 60;\r\n    }\r\n\r\n    /**\r\n     * Return the cadence of notches that get labels in the primary color.\r\n     *\r\n     * @param {number} pxPerSec Pixels per second\r\n     * @returns {number} Cadence\r\n     */\r\n    defaultPrimaryLabelInterval(pxPerSec) {\r\n        if (pxPerSec >= 25) {\r\n            return 10;\r\n        } else if (pxPerSec * 5 >= 25) {\r\n            return 6;\r\n        } else if (pxPerSec * 15 >= 25) {\r\n            return 4;\r\n        }\r\n        return 4;\r\n    }\r\n\r\n    /**\r\n     * Return the cadence of notches that get labels in the secondary color.\r\n     *\r\n     * @param {number} pxPerSec Pixels per second\r\n     * @returns {number} Cadence\r\n     */\r\n    defaultSecondaryLabelInterval(pxPerSec) {\r\n        if (pxPerSec >= 25) {\r\n            return 5;\r\n        } else if (pxPerSec * 5 >= 25) {\r\n            return 2;\r\n        } else if (pxPerSec * 15 >= 25) {\r\n            return 2;\r\n        }\r\n        return 2;\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","TimelinePlugin","params","name","deferInit","instance","_onScroll","this","wrapper","drawer","scrollLeft","_onRedraw","render","_onReady","ws","wavesurfer","pixelRatio","maxCanvasWidth","width","maxCanvasElementWidth","Math","round","addEventListener","on","_onZoom","_onWrapperClick","e","preventDefault","relX","offsetX","layerX","fireEvent","scrollWidth","constructor","container","document","querySelector","Error","util","assign","height","notchPercentHeight","labelPadding","unlabeledNotchColor","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","fontFamily","fontSize","duration","zoomDebounce","formatTimeCallback","defaultFormatTimeCallback","timeInterval","defaultTimeInterval","primaryLabelInterval","defaultPrimaryLabelInterval","secondaryLabelInterval","defaultSecondaryLabelInterval","offset","canvases","debounce","init","isReady","once","destroy","unAll","un","removeEventListener","parentNode","removeChild","createWrapper","wsParams","innerHTML","appendChild","createElement","style","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","overflowY","updateCanvases","updateCanvasesPositioning","renderCanvases","addCanvas","canvas","push","zIndex","removeCanvas","pop","parentElement","totalWidth","requiredCanvases","ceil","length","canvasesLength","forEach","i","canvasWidth","left","backend","getDuration","totalSeconds","parseInt","getWidth","height1","height2","pixelsPerSecond","formatTime","intervalFnOrVal","option","curPixel","curSeconds","positioning","renderSeconds","renderPositions","cb","pos","setFillStyles","setFonts","fillRect","fillText","fillStyle","context","getContext","font","x","y","leftOffset","intersection","x1","max","y1","x2","min","y2","text","textWidth","xOffset","measureText","seconds","pxPerSec"],"sourceRoot":""}