{"version":3,"file":"wavesurfer.microphone.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/runtime/define property getters","webpack://WaveSurfer/webpack/runtime/hasOwnProperty shorthand","webpack://WaveSurfer/webpack/runtime/make namespace object","webpack://WaveSurfer/./src/plugin/microphone/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"microphone\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * @typedef {Object} MicrophonePluginParams\r\n * @property {MediaStreamConstraints} constraints The constraints parameter is a\r\n * MediaStreamConstaints object with two members: video and audio, describing\r\n * the media types requested. Either or both must be specified.\r\n * @property {number} bufferSize=4096 The buffer size in units of sample-frames.\r\n * If specified, the bufferSize must be one of the following values: `256`,\r\n * `512`, `1024`, `2048`, `4096`, `8192`, `16384`\r\n * @property {number} numberOfInputChannels=1 Integer specifying the number of\r\n * channels for this node's input. Values of up to 32 are supported.\r\n * @property {number} numberOfOutputChannels=1 Integer specifying the number of\r\n * channels for this node's output.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('microphone')`\r\n */\r\n\r\n/**\r\n * Visualize microphone input in a wavesurfer instance.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import MicrophonePlugin from 'wavesurfer.microphone.js';\r\n *\r\n * // commonjs\r\n * var MicrophonePlugin = require('wavesurfer.microphone.js');\r\n *\r\n * // if you are using <script> tags\r\n * var MicrophonePlugin = window.WaveSurfer.microphone;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     MicrophonePlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class MicrophonePlugin {\r\n    /**\r\n     * Microphone plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {MicrophonePluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'microphone',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            instance: MicrophonePlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n\r\n        this.active = false;\r\n        this.paused = false;\r\n        this.browser = this.detectBrowser();\r\n        this.reloadBufferFunction = e => this.reloadBuffer(e);\r\n\r\n        // cross-browser getUserMedia\r\n        const promisifiedOldGUM = (\r\n            constraints,\r\n            successCallback,\r\n            errorCallback\r\n        ) => {\r\n            // get a hold of getUserMedia, if present\r\n            const getUserMedia =\r\n                navigator.getUserMedia ||\r\n                navigator.webkitGetUserMedia ||\r\n                navigator.mozGetUserMedia ||\r\n                navigator.msGetUserMedia;\r\n            // Some browsers just don't implement it - return a rejected\r\n            // promise with an error to keep a consistent interface\r\n            if (!getUserMedia) {\r\n                return Promise.reject(\r\n                    new Error('getUserMedia is not implemented in this browser')\r\n                );\r\n            }\r\n            // otherwise, wrap the call to the old navigator.getUserMedia with\r\n            // a Promise\r\n            return new Promise((successCallback, errorCallback) => {\r\n                getUserMedia.call(\r\n                    navigator,\r\n                    constraints,\r\n                    successCallback,\r\n                    errorCallback\r\n                );\r\n            });\r\n        };\r\n        // Older browsers might not implement mediaDevices at all, so we set an\r\n        // empty object first\r\n        if (navigator.mediaDevices === undefined) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n        // Some browsers partially implement mediaDevices. We can't just assign\r\n        // an object with getUserMedia as it would overwrite existing\r\n        // properties. Here, we will just add the getUserMedia property if it's\r\n        // missing.\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\r\n        }\r\n        this.constraints = this.params.constraints || {\r\n            video: false,\r\n            audio: true\r\n        };\r\n        this.bufferSize = this.params.bufferSize || 4096;\r\n        this.numberOfInputChannels = this.params.numberOfInputChannels || 1;\r\n        this.numberOfOutputChannels = this.params.numberOfOutputChannels || 1;\r\n\r\n        this._onBackendCreated = () => {\r\n            // wavesurfer's AudioContext where we'll route the mic signal to\r\n            this.micContext = this.wavesurfer.backend.getAudioContext();\r\n        };\r\n    }\r\n\r\n    init() {\r\n        this.wavesurfer.on('backend-created', this._onBackendCreated);\r\n        if (this.wavesurfer.backend) {\r\n            this._onBackendCreated();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy the microphone plugin.\r\n     */\r\n    destroy() {\r\n        // make sure the buffer is not redrawn during\r\n        // cleanup and demolition of this plugin.\r\n        this.paused = true;\r\n\r\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\r\n        this.stop();\r\n    }\r\n\r\n    /**\r\n     * Allow user to select audio input device, e.g. microphone, and\r\n     * start the visualization.\r\n     */\r\n    start() {\r\n        navigator.mediaDevices\r\n            .getUserMedia(this.constraints)\r\n            .then(data => this.gotStream(data))\r\n            .catch(data => this.deviceError(data));\r\n    }\r\n\r\n    /**\r\n     * Pause/resume visualization.\r\n     */\r\n    togglePlay() {\r\n        if (!this.active) {\r\n            // start it first\r\n            this.start();\r\n        } else {\r\n            // toggle paused\r\n            this.paused = !this.paused;\r\n\r\n            if (this.paused) {\r\n                this.pause();\r\n            } else {\r\n                this.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play visualization.\r\n     */\r\n    play() {\r\n        this.paused = false;\r\n\r\n        this.connect();\r\n    }\r\n\r\n    /**\r\n     * Pause visualization.\r\n     */\r\n    pause() {\r\n        this.paused = true;\r\n\r\n        // disconnect sources so they can be used elsewhere\r\n        // (eg. during audio playback)\r\n        this.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Stop the device stream and remove any remaining waveform drawing from\r\n     * the wavesurfer canvas.\r\n     */\r\n    stop() {\r\n        if (this.active) {\r\n            // stop visualization and device\r\n            this.stopDevice();\r\n\r\n            // empty last frame\r\n            this.wavesurfer.empty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop the device and the visualization.\r\n     */\r\n    stopDevice() {\r\n        this.active = false;\r\n\r\n        // stop visualization\r\n        this.disconnect();\r\n\r\n        // stop stream from device\r\n        if (this.stream && this.stream.getTracks) {\r\n            this.stream.getTracks().forEach(stream => stream.stop());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect the media sources that feed the visualization.\r\n     */\r\n    connect() {\r\n        if (this.stream !== undefined) {\r\n            // Create a local buffer for data to be copied to the Wavesurfer buffer for Edge\r\n            if (this.browser.browser === 'edge') {\r\n                this.localAudioBuffer = this.micContext.createBuffer(\r\n                    this.numberOfInputChannels,\r\n                    this.bufferSize,\r\n                    this.micContext.sampleRate\r\n                );\r\n            }\r\n\r\n            // Create an AudioNode from the stream.\r\n            this.mediaStreamSource = this.micContext.createMediaStreamSource(\r\n                this.stream\r\n            );\r\n\r\n            this.levelChecker = this.micContext.createScriptProcessor(\r\n                this.bufferSize,\r\n                this.numberOfInputChannels,\r\n                this.numberOfOutputChannels\r\n            );\r\n            this.mediaStreamSource.connect(this.levelChecker);\r\n\r\n            this.levelChecker.connect(this.micContext.destination);\r\n            this.levelChecker.onaudioprocess = this.reloadBufferFunction;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect the media sources that feed the visualization.\r\n     */\r\n    disconnect() {\r\n        if (this.mediaStreamSource !== undefined) {\r\n            this.mediaStreamSource.disconnect();\r\n        }\r\n\r\n        if (this.levelChecker !== undefined) {\r\n            this.levelChecker.disconnect();\r\n            this.levelChecker.onaudioprocess = undefined;\r\n        }\r\n\r\n        if (this.localAudioBuffer !== undefined) {\r\n            this.localAudioBuffer = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redraw the waveform.\r\n     *\r\n     * @param {object} event Audioprocess event\r\n     */\r\n    reloadBuffer(event) {\r\n        if (!this.paused) {\r\n            this.wavesurfer.empty();\r\n\r\n            if (this.browser.browser === 'edge') {\r\n                // copy audio data to a local audio buffer,\r\n                // from https://github.com/audiojs/audio-buffer-utils\r\n                let channel, l;\r\n                for (\r\n                    channel = 0,\r\n                    l = Math.min(\r\n                        this.localAudioBuffer.numberOfChannels,\r\n                        event.inputBuffer.numberOfChannels\r\n                    );\r\n                    channel < l;\r\n                    channel++\r\n                ) {\r\n                    this.localAudioBuffer\r\n                        .getChannelData(channel)\r\n                        .set(event.inputBuffer.getChannelData(channel));\r\n                }\r\n\r\n                this.wavesurfer.loadDecodedBuffer(this.localAudioBuffer);\r\n            } else {\r\n                this.wavesurfer.loadDecodedBuffer(event.inputBuffer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Audio input device is ready.\r\n     *\r\n     * @param {MediaStream} stream The microphone's media stream.\r\n     */\r\n    gotStream(stream) {\r\n        this.stream = stream;\r\n        this.active = true;\r\n\r\n        // start visualization\r\n        this.play();\r\n\r\n        // notify listeners\r\n        this.fireEvent('deviceReady', stream);\r\n    }\r\n\r\n    /**\r\n     * Device error callback.\r\n     *\r\n     * @param {string} code Error message\r\n     */\r\n    deviceError(code) {\r\n        // notify listeners\r\n        this.fireEvent('deviceError', code);\r\n    }\r\n\r\n    /**\r\n     * Extract browser version out of the provided user agent string.\r\n     * @param {!string} uastring userAgent string.\r\n     * @param {!string} expr Regular expression used as match criteria.\r\n     * @param {!number} pos position in the version string to be returned.\r\n     * @return {!number} browser version.\r\n     */\r\n    extractVersion(uastring, expr, pos) {\r\n        const match = uastring.match(expr);\r\n        return match && match.length >= pos && parseInt(match[pos], 10);\r\n    }\r\n\r\n    /**\r\n     * Browser detector.\r\n     * @return {object} result containing browser, version and minVersion\r\n     *     properties.\r\n     */\r\n    detectBrowser() {\r\n        // Returned result object.\r\n        const result = {};\r\n        result.browser = null;\r\n        result.version = null;\r\n        result.minVersion = null;\r\n\r\n        // Non supported browser.\r\n        if (typeof window === 'undefined' || !window.navigator) {\r\n            result.browser = 'Not a supported browser.';\r\n            return result;\r\n        }\r\n\r\n        if (navigator.mozGetUserMedia) {\r\n            // Firefox\r\n            result.browser = 'firefox';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Firefox\\/(\\d+)\\./,\r\n                1\r\n            );\r\n            result.minVersion = 31;\r\n            return result;\r\n        } else if (navigator.webkitGetUserMedia) {\r\n            // Chrome/Chromium/Webview/Opera\r\n            result.browser = 'chrome';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Chrom(e|ium)\\/(\\d+)\\./,\r\n                2\r\n            );\r\n            result.minVersion = 38;\r\n            return result;\r\n        } else if (\r\n            navigator.mediaDevices &&\r\n            navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)\r\n        ) {\r\n            // Edge\r\n            result.browser = 'edge';\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /Edge\\/(\\d+).(\\d+)$/,\r\n                2\r\n            );\r\n            result.minVersion = 10547;\r\n            return result;\r\n        } else if (\r\n            window.RTCPeerConnection &&\r\n            navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)\r\n        ) {\r\n            // Safari\r\n            result.browser = 'safari';\r\n            result.minVersion = 11;\r\n            result.version = this.extractVersion(\r\n                navigator.userAgent,\r\n                /AppleWebKit\\/(\\d+)\\./,\r\n                1\r\n            );\r\n            return result;\r\n        }\r\n\r\n        // Non supported browser default.\r\n        result.browser = 'Not a supported browser.';\r\n        return result;\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","MicrophonePlugin","params","name","deferInit","instance","constructor","ws","this","wavesurfer","active","paused","browser","detectBrowser","reloadBufferFunction","e","reloadBuffer","promisifiedOldGUM","constraints","successCallback","errorCallback","getUserMedia","navigator","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Promise","reject","Error","undefined","mediaDevices","video","audio","bufferSize","numberOfInputChannels","numberOfOutputChannels","_onBackendCreated","micContext","backend","getAudioContext","init","on","destroy","un","stop","start","then","data","gotStream","catch","deviceError","togglePlay","pause","play","connect","disconnect","stopDevice","empty","stream","getTracks","forEach","localAudioBuffer","createBuffer","sampleRate","mediaStreamSource","createMediaStreamSource","levelChecker","createScriptProcessor","destination","onaudioprocess","event","channel","l","Math","min","numberOfChannels","inputBuffer","getChannelData","set","loadDecodedBuffer","fireEvent","code","extractVersion","uastring","expr","pos","match","length","parseInt","result","window","version","userAgent","minVersion","RTCPeerConnection"],"sourceRoot":""}