{"version":3,"file":"wavesurfer.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/runtime/compat get default export","webpack://WaveSurfer/webpack/runtime/define property getters","webpack://WaveSurfer/webpack/runtime/hasOwnProperty shorthand","webpack://WaveSurfer/webpack/runtime/make namespace object","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/absMax.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/util/fetch.js","webpack://WaveSurfer/./src/util/clamp.js","webpack://WaveSurfer/./src/util/orientation.js","webpack://WaveSurfer/./src/util/silence-mode.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/peakcache.js","webpack://WaveSurfer/./src/mediaelement-webaudio.js","webpack://WaveSurfer/./src/wavesurfer.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(self, () => {\nreturn ","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Get a random prefixed ID\r\n *\r\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\r\n * @returns {String} Random prefixed ID\r\n * @example\r\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\r\n *\r\n * let prefix = 'foo-';\r\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\r\n */\r\nexport default function getId(prefix) {\r\n    if (prefix === undefined) {\r\n        prefix = 'wavesurfer_';\r\n    }\r\n    return (\r\n        prefix +\r\n        Math.random()\r\n            .toString(32)\r\n            .substring(2)\r\n    );\r\n}\r\n","/**\r\n * Get the largest value\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([1, 2, 3])); // logs 3\r\n */\r\nexport default function max(values) {\r\n    let largest = -Infinity;\r\n    Object.keys(values).forEach(i => {\r\n        if (values[i] > largest) {\r\n            largest = values[i];\r\n        }\r\n    });\r\n    return largest;\r\n}\r\n","/**\r\n * Get the smallest value\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Smallest number found\r\n * @example console.log(min([1, 2, 3])); // logs 1\r\n */\r\nexport default function min(values) {\r\n    let smallest = Number(Infinity);\r\n    Object.keys(values).forEach(i => {\r\n        if (values[i] < smallest) {\r\n            smallest = values[i];\r\n        }\r\n    });\r\n    return smallest;\r\n}\r\n","import utilMax from './max';\r\nimport utilmin from './min';\r\n\r\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\r\nexport default function absMax(values) {\r\n    const max = utilMax(values);\r\n    const min = utilmin(values);\r\n    return -min > max ? -min : max;\r\n}\r\n","/**\r\n * @typedef {Object} ListenerDescriptor\r\n * @property {string} name The name of the event\r\n * @property {function} callback The callback\r\n * @property {function} un The function to call to remove the listener\r\n */\r\n\r\n/**\r\n * Observer class\r\n */\r\nexport default class Observer {\r\n    /**\r\n     * Instantiate Observer\r\n     */\r\n    constructor() {\r\n        /**\r\n         * @private\r\n         * @todo Initialise the handlers here already and remove the conditional\r\n         * assignment in `on()`\r\n         */\r\n        this._disabledEventEmissions = [];\r\n        this.handlers = null;\r\n    }\r\n    /**\r\n     * Attach a handler function for an event.\r\n     *\r\n     * @param {string} event Name of the event to listen to\r\n     * @param {function} fn The callback to trigger when the event is fired\r\n     * @return {ListenerDescriptor} The event descriptor\r\n     */\r\n    on(event, fn) {\r\n        if (!this.handlers) {\r\n            this.handlers = {};\r\n        }\r\n\r\n        let handlers = this.handlers[event];\r\n        if (!handlers) {\r\n            handlers = this.handlers[event] = [];\r\n        }\r\n        handlers.push(fn);\r\n\r\n        // Return an event descriptor\r\n        return {\r\n            name: event,\r\n            callback: fn,\r\n            un: (e, fn) => this.un(e, fn)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Remove an event handler.\r\n     *\r\n     * @param {string} event Name of the event the listener that should be\r\n     * removed listens to\r\n     * @param {function} fn The callback that should be removed\r\n     */\r\n    un(event, fn) {\r\n        if (!this.handlers) {\r\n            return;\r\n        }\r\n\r\n        const handlers = this.handlers[event];\r\n        let i;\r\n        if (handlers) {\r\n            if (fn) {\r\n                for (i = handlers.length - 1; i >= 0; i--) {\r\n                    if (handlers[i] == fn) {\r\n                        handlers.splice(i, 1);\r\n                    }\r\n                }\r\n            } else {\r\n                handlers.length = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all event handlers.\r\n     */\r\n    unAll() {\r\n        this.handlers = null;\r\n    }\r\n\r\n    /**\r\n     * Attach a handler to an event. The handler is executed at most once per\r\n     * event type.\r\n     *\r\n     * @param {string} event The event to listen to\r\n     * @param {function} handler The callback that is only to be called once\r\n     * @return {ListenerDescriptor} The event descriptor\r\n     */\r\n    once(event, handler) {\r\n        const fn = (...args) => {\r\n            /*  eslint-disable no-invalid-this */\r\n            handler.apply(this, args);\r\n            /*  eslint-enable no-invalid-this */\r\n            setTimeout(() => {\r\n                this.un(event, fn);\r\n            }, 0);\r\n        };\r\n        return this.on(event, fn);\r\n    }\r\n\r\n    /**\r\n     * Disable firing a list of events by name. When specified, event handlers for any event type\r\n     * passed in here will not be called.\r\n     *\r\n     * @since 4.0.0\r\n     * @param {string[]} eventNames an array of event names to disable emissions for\r\n     * @example\r\n     * // disable seek and interaction events\r\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\r\n     */\r\n    setDisabledEventEmissions(eventNames) {\r\n        this._disabledEventEmissions = eventNames;\r\n    }\r\n\r\n    /**\r\n     * plugins borrow part of this class without calling the constructor,\r\n     * so we have to be careful about _disabledEventEmissions\r\n     */\r\n\r\n    _isDisabledEventEmission(event) {\r\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\r\n    }\r\n\r\n    /**\r\n     * Manually fire an event\r\n     *\r\n     * @param {string} event The event to fire manually\r\n     * @param {...any} args The arguments with which to call the listeners\r\n     */\r\n    fireEvent(event, ...args) {\r\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\r\n            return;\r\n        }\r\n\r\n        const handlers = this.handlers[event];\r\n        handlers &&\r\n            handlers.forEach(fn => {\r\n                fn(...args);\r\n            });\r\n    }\r\n}\r\n","/**\r\n * Apply a map of styles to an element\r\n *\r\n * @param {HTMLElement} el The element that the styles will be applied to\r\n * @param {Object} styles The map of propName: attribute, both are used as-is\r\n *\r\n * @return {HTMLElement} el\r\n */\r\nexport default function style(el, styles) {\r\n    Object.keys(styles).forEach(prop => {\r\n        if (el.style[prop] !== styles[prop]) {\r\n            el.style[prop] = styles[prop];\r\n        }\r\n    });\r\n    return el;\r\n}\r\n","/* eslint-disable valid-jsdoc */\r\n/**\r\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\r\n * `setTimeout` if the function is not found\r\n *\r\n * @return {function} Available `requestAnimationFrame` function for the browser\r\n */\r\nexport default (\r\n    window.requestAnimationFrame ||\r\n    window.webkitRequestAnimationFrame ||\r\n    window.mozRequestAnimationFrame ||\r\n    window.oRequestAnimationFrame ||\r\n    window.msRequestAnimationFrame ||\r\n    ((callback, element) => setTimeout(callback, 1000 / 60))\r\n).bind(window);\r\n","import reqAnimationFrame from './request-animation-frame';\r\n\r\n/**\r\n * Create a function which will be called at the next requestAnimationFrame\r\n * cycle\r\n *\r\n * @param {function} func The function to call\r\n *\r\n * @return {func} The function wrapped within a requestAnimationFrame\r\n */\r\nexport default function frame(func) {\r\n    return (...args) => reqAnimationFrame(() => func(...args));\r\n}\r\n","/**\r\n * Stops propagation of click event and removes event listener\r\n *\r\n * @private\r\n * @param {object} event The click event\r\n */\r\nfunction preventClickHandler(event) {\r\n    event.stopPropagation();\r\n    document.body.removeEventListener('click', preventClickHandler, true);\r\n}\r\n\r\n/**\r\n * Starts listening for click event and prevent propagation\r\n *\r\n * @param {object} values Values\r\n */\r\nexport default function preventClick(values) {\r\n    document.body.addEventListener('click', preventClickHandler, true);\r\n}\r\n","/**\r\n * @since 3.0.0\r\n */\r\n\r\nimport Observer from './observer';\r\n\r\nclass ProgressHandler {\r\n    /**\r\n     * Instantiate ProgressHandler\r\n     *\r\n     * @param {Observer} instance The `fetchFile` observer instance.\r\n     * @param {Number} contentLength Content length.\r\n     * @param {Response} response Response object.\r\n     */\r\n    constructor(instance, contentLength, response) {\r\n        this.instance = instance;\r\n        this.instance._reader = response.body.getReader();\r\n\r\n        this.total = parseInt(contentLength, 10);\r\n        this.loaded = 0;\r\n    }\r\n\r\n    /**\r\n     * A method that is called once, immediately after the `ReadableStream``\r\n     * is constructed.\r\n     *\r\n     * @param {ReadableStreamDefaultController} controller Controller instance\r\n     *     used to control the stream.\r\n     */\r\n    start(controller) {\r\n        const read = () => {\r\n            // instance._reader.read() returns a promise that resolves\r\n            // when a value has been received\r\n            this.instance._reader\r\n                .read()\r\n                .then(({ done, value }) => {\r\n                    // result objects contain two properties:\r\n                    // done  - true if the stream has already given you all its data.\r\n                    // value - some data. Always undefined when done is true.\r\n                    if (done) {\r\n                        // ensure onProgress called when content-length=0\r\n                        if (this.total === 0) {\r\n                            this.instance.onProgress.call(this.instance, {\r\n                                loaded: this.loaded,\r\n                                total: this.total,\r\n                                lengthComputable: false\r\n                            });\r\n                        }\r\n                        // no more data needs to be consumed, close the stream\r\n                        controller.close();\r\n                        return;\r\n                    }\r\n\r\n                    this.loaded += value.byteLength;\r\n                    this.instance.onProgress.call(this.instance, {\r\n                        loaded: this.loaded,\r\n                        total: this.total,\r\n                        lengthComputable: !(this.total === 0)\r\n                    });\r\n                    // enqueue the next data chunk into our target stream\r\n                    controller.enqueue(value);\r\n                    read();\r\n                })\r\n                .catch(error => {\r\n                    controller.error(error);\r\n                });\r\n        };\r\n\r\n        read();\r\n    }\r\n}\r\n\r\n/**\r\n * Load a file using `fetch`.\r\n *\r\n * @param {object} options Request options to use. See example below.\r\n * @returns {Observer} Observer instance\r\n * @example\r\n * // default options\r\n * let options = {\r\n *     url: undefined,\r\n *     method: 'GET',\r\n *     mode: 'cors',\r\n *     credentials: 'same-origin',\r\n *     cache: 'default',\r\n *     responseType: 'json',\r\n *     requestHeaders: [],\r\n *     redirect: 'follow',\r\n *     referrer: 'client'\r\n * };\r\n *\r\n * // override some options\r\n * options.url = '../media/demo.wav';\r\n\r\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\r\n * options.responseType = 'arraybuffer';\r\n *\r\n * // make fetch call\r\n * let request = util.fetchFile(options);\r\n *\r\n * // listen for events\r\n * request.on('progress', e => {\r\n *     console.log('progress', e);\r\n * });\r\n *\r\n * request.on('success', data => {\r\n *     console.log('success!', data);\r\n * });\r\n *\r\n * request.on('error', e => {\r\n *     console.warn('fetchFile error: ', e);\r\n * });\r\n */\r\nexport default function fetchFile(options) {\r\n    if (!options) {\r\n        throw new Error('fetch options missing');\r\n    } else if (!options.url) {\r\n        throw new Error('fetch url missing');\r\n    }\r\n    const instance = new Observer();\r\n    const fetchHeaders = new Headers();\r\n    const fetchRequest = new Request(options.url);\r\n\r\n    // add ability to abort\r\n    instance.controller = new AbortController();\r\n\r\n    // check if headers have to be added\r\n    if (options && options.requestHeaders) {\r\n        // add custom request headers\r\n        options.requestHeaders.forEach(header => {\r\n            fetchHeaders.append(header.key, header.value);\r\n        });\r\n    }\r\n\r\n    // parse fetch options\r\n    const responseType = options.responseType || 'json';\r\n    const fetchOptions = {\r\n        method: options.method || 'GET',\r\n        headers: fetchHeaders,\r\n        mode: options.mode || 'cors',\r\n        credentials: options.credentials || 'same-origin',\r\n        cache: options.cache || 'default',\r\n        redirect: options.redirect || 'follow',\r\n        referrer: options.referrer || 'client',\r\n        signal: instance.controller.signal\r\n    };\r\n\r\n    fetch(fetchRequest, fetchOptions)\r\n        .then(response => {\r\n            // store response reference\r\n            instance.response = response;\r\n\r\n            let progressAvailable = true;\r\n            if (!response.body) {\r\n                // ReadableStream is not yet supported in this browser\r\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\r\n                progressAvailable = false;\r\n            }\r\n\r\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\r\n            const contentLength = response.headers.get('content-length');\r\n            if (contentLength === null) {\r\n                // Content-Length server response header missing.\r\n                // Don't evaluate download progress if we can't compare against a total size\r\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\r\n                progressAvailable = false;\r\n            }\r\n\r\n            if (!progressAvailable) {\r\n                // not able to check download progress so skip it\r\n                return response;\r\n            }\r\n\r\n            // fire progress event when during load\r\n            instance.onProgress = e => {\r\n                instance.fireEvent('progress', e);\r\n            };\r\n\r\n            return new Response(\r\n                new ReadableStream(\r\n                    new ProgressHandler(instance, contentLength, response)\r\n                ),\r\n                fetchOptions\r\n            );\r\n        })\r\n        .then(response => {\r\n            let errMsg;\r\n            if (response.ok) {\r\n                switch (responseType) {\r\n                    case 'arraybuffer':\r\n                        return response.arrayBuffer();\r\n\r\n                    case 'json':\r\n                        return response.json();\r\n\r\n                    case 'blob':\r\n                        return response.blob();\r\n\r\n                    case 'text':\r\n                        return response.text();\r\n\r\n                    default:\r\n                        errMsg = 'Unknown responseType: ' + responseType;\r\n                        break;\r\n                }\r\n            }\r\n            if (!errMsg) {\r\n                errMsg = 'HTTP error status: ' + response.status;\r\n            }\r\n            throw new Error(errMsg);\r\n        })\r\n        .then(response => {\r\n            instance.fireEvent('success', response);\r\n        })\r\n        .catch(error => {\r\n            instance.fireEvent('error', error);\r\n        });\r\n\r\n    // return the fetch request\r\n    instance.fetchRequest = fetchRequest;\r\n    return instance;\r\n}\r\n","/**\r\n * Returns a number limited to the given range.\r\n *\r\n * @param {number} val The number to be limited to a range\r\n * @param {number} min The lower boundary of the limit range\r\n * @param {number} max The upper boundary of the limit range\r\n * @returns {number} A number in the range [min, max]\r\n */\r\nexport default function clamp(val, min, max) {\r\n    return Math.min(Math.max(min, val), max);\r\n}\r\n","const verticalPropMap = {\r\n    width: 'height',\r\n    height: 'width',\r\n\r\n    overflowX: 'overflowY',\r\n    overflowY: 'overflowX',\r\n\r\n    clientWidth: 'clientHeight',\r\n    clientHeight: 'clientWidth',\r\n\r\n    clientX: 'clientY',\r\n    clientY: 'clientX',\r\n\r\n    scrollWidth: 'scrollHeight',\r\n    scrollLeft: 'scrollTop',\r\n\r\n    offsetLeft: 'offsetTop',\r\n    offsetTop: 'offsetLeft',\r\n    offsetHeight: 'offsetWidth',\r\n    offsetWidth: 'offsetHeight',\r\n\r\n    left: 'top',\r\n    right: 'bottom',\r\n    top: 'left',\r\n    bottom: 'right',\r\n\r\n    borderRightStyle: 'borderBottomStyle',\r\n    borderRightWidth: 'borderBottomWidth',\r\n    borderRightColor: 'borderBottomColor'\r\n};\r\n\r\n/**\r\n * Convert a horizontally-oriented property name to a vertical one.\r\n *\r\n * @param {string} prop A property name\r\n * @param {bool} vertical Whether the element is oriented vertically\r\n * @returns {string} prop, converted appropriately\r\n */\r\nfunction mapProp(prop, vertical) {\r\n    if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\r\n        return vertical ? verticalPropMap[prop] : prop;\r\n    } else {\r\n        return prop;\r\n    }\r\n}\r\n\r\nconst isProxy = Symbol(\"isProxy\");\r\n\r\n/**\r\n * Returns an appropriately oriented object based on vertical.\r\n * If vertical is true, attribute getting and setting will be mapped through\r\n * verticalPropMap, so that e.g. getting the object's .width will give its\r\n * .height instead.\r\n * Certain methods of an oriented object will return oriented objects as well.\r\n * Oriented objects can't be added to the DOM directly since they are Proxy objects\r\n * and thus fail typechecks. Use domElement to get the actual element for this.\r\n *\r\n * @param {object} target The object to be wrapped and oriented\r\n * @param {bool} vertical Whether the element is oriented vertically\r\n * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\r\n * @since 5.0.0\r\n */\r\nexport default function withOrientation(target, vertical) {\r\n    if (target[isProxy]) {\r\n        return target;\r\n    } else {\r\n        return new Proxy(\r\n            target, {\r\n                get: function(obj, prop, receiver) {\r\n                    if (prop === isProxy) {\r\n                        return true;\r\n                    } else if (prop === 'domElement') {\r\n                        return obj;\r\n                    } else if (prop === 'style') {\r\n                        return withOrientation(obj.style, vertical);\r\n                    } else if (prop === 'canvas') {\r\n                        return withOrientation(obj.canvas, vertical);\r\n                    } else if (prop === 'getBoundingClientRect') {\r\n                        return function(...args) {\r\n                            return withOrientation(obj.getBoundingClientRect(...args), vertical);\r\n                        };\r\n                    } else if (prop === 'getContext') {\r\n                        return function(...args) {\r\n                            return withOrientation(obj.getContext(...args), vertical);\r\n                        };\r\n                    } else {\r\n                        let value = obj[mapProp(prop, vertical)];\r\n                        return typeof value == 'function' ? value.bind(obj) : value;\r\n                    }\r\n                },\r\n                set: function(obj, prop, value) {\r\n                    obj[mapProp(prop, vertical)] = value;\r\n                    return true;\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Ignores device silence mode when using the `WebAudio` backend.\r\n *\r\n * Many mobile devices contain a hardware button to mute the ringtone for incoming\r\n * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\r\n * wavesurfer's audio when using the `WebAudio` backend. This function creates a\r\n * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\r\n * when muting the device ringer.\r\n *\r\n * @since 5.2.0\r\n */\r\nexport default function ignoreSilenceMode() {\r\n    // Set the src to a short bit of url encoded as a silent mp3\r\n    // NOTE The silence MP3 must be high quality, when web audio sounds are played\r\n    // in parallel the web audio sound is mixed to match the bitrate of the html sound\r\n    // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\r\n    const audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\r\n\r\n    // disable iOS Airplay (setting the attribute in js doesn't work)\r\n    let tmp = document.createElement(\"div\");\r\n    tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\r\n\r\n    let audioSilentMode = tmp.children.item(0);\r\n    audioSilentMode.src = audioData;\r\n    audioSilentMode.preload = \"auto\";\r\n    audioSilentMode.type = \"audio/mpeg\";\r\n    audioSilentMode.disableRemotePlayback = true;\r\n\r\n    // play\r\n    audioSilentMode.play();\r\n\r\n    // cleanup\r\n    audioSilentMode.remove();\r\n    tmp.remove();\r\n}\r\n","import * as util from './util';\r\n\r\n/**\r\n * Parent class for renderers\r\n *\r\n * @extends {Observer}\r\n */\r\nexport default class Drawer extends util.Observer {\r\n    /**\r\n     * @param {HTMLElement} container The container node of the wavesurfer instance\r\n     * @param {WavesurferParams} params The wavesurfer initialisation options\r\n     */\r\n    constructor(container, params) {\r\n        super();\r\n\r\n        this.container = util.withOrientation(container, params.vertical);\r\n        /**\r\n         * @type {WavesurferParams}\r\n         */\r\n        this.params = params;\r\n        /**\r\n         * The width of the renderer\r\n         * @type {number}\r\n         */\r\n        this.width = 0;\r\n        /**\r\n         * The height of the renderer\r\n         * @type {number}\r\n         */\r\n        this.height = params.height * this.params.pixelRatio;\r\n\r\n        this.lastPos = 0;\r\n        /**\r\n         * The `<wave>` element which is added to the container\r\n         * @type {HTMLElement}\r\n         */\r\n        this.wrapper = null;\r\n    }\r\n\r\n    /**\r\n     * Alias of `util.style`\r\n     *\r\n     * @param {HTMLElement} el The element that the styles will be applied to\r\n     * @param {Object} styles The map of propName: attribute, both are used as-is\r\n     * @return {HTMLElement} el\r\n     */\r\n    style(el, styles) {\r\n        return util.style(el, styles);\r\n    }\r\n\r\n    /**\r\n     * Create the wrapper `<wave>` element, style it and set up the events for\r\n     * interaction\r\n     */\r\n    createWrapper() {\r\n        this.wrapper = util.withOrientation(\r\n            this.container.appendChild(document.createElement('wave')),\r\n            this.params.vertical\r\n        );\r\n\r\n        this.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: this.params.height + 'px'\r\n        });\r\n\r\n        if (this.params.fillParent || this.params.scrollParent) {\r\n            this.style(this.wrapper, {\r\n                width: '100%',\r\n                cursor: this.params.hideCursor ? 'none' : 'auto',\r\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n\r\n        this.setupWrapperEvents();\r\n    }\r\n\r\n    /**\r\n     * Handle click event\r\n     *\r\n     * @param {Event} e Click event\r\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\r\n     * @return {number} Playback position from 0 to 1\r\n     */\r\n    handleEvent(e, noPrevent) {\r\n        !noPrevent && e.preventDefault();\r\n\r\n        const clientX = util.withOrientation(\r\n            e.targetTouches ? e.targetTouches[0] : e,\r\n            this.params.vertical\r\n        ).clientX;\r\n        const bbox = this.wrapper.getBoundingClientRect();\r\n\r\n        const nominalWidth = this.width;\r\n        const parentWidth = this.getWidth();\r\n        const progressPixels = this.getProgressPixels(bbox, clientX);\r\n\r\n        let progress;\r\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\r\n            progress = progressPixels *\r\n                (this.params.pixelRatio / nominalWidth) || 0;\r\n        } else {\r\n            progress = (progressPixels + this.wrapper.scrollLeft) /\r\n                this.wrapper.scrollWidth || 0;\r\n        }\r\n\r\n        return util.clamp(progress, 0, 1);\r\n    }\r\n\r\n    getProgressPixels(wrapperBbox, clientX) {\r\n        if (this.params.rtl) {\r\n            return wrapperBbox.right - clientX;\r\n        } else {\r\n            return clientX - wrapperBbox.left;\r\n        }\r\n    }\r\n\r\n    setupWrapperEvents() {\r\n        this.wrapper.addEventListener('click', e => {\r\n            const orientedEvent = util.withOrientation(e, this.params.vertical);\r\n            const scrollbarHeight = this.wrapper.offsetHeight -\r\n                  this.wrapper.clientHeight;\r\n\r\n            if (scrollbarHeight !== 0) {\r\n                // scrollbar is visible.  Check if click was on it\r\n                const bbox = this.wrapper.getBoundingClientRect();\r\n                if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\r\n                    // ignore mousedown as it was on the scrollbar\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (this.params.interact) {\r\n                this.fireEvent('click', e, this.handleEvent(e));\r\n            }\r\n        });\r\n\r\n        this.wrapper.addEventListener('dblclick', e => {\r\n            if (this.params.interact) {\r\n                this.fireEvent('dblclick', e, this.handleEvent(e));\r\n            }\r\n        });\r\n\r\n        this.wrapper.addEventListener('scroll', e =>\r\n            this.fireEvent('scroll', e)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw peaks on the canvas\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} length The width of the area that should be drawn\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawPeaks(peaks, length, start, end) {\r\n        if (!this.setWidth(length)) {\r\n            this.clearWave();\r\n        }\r\n\r\n        this.params.barWidth\r\n            ? this.drawBars(peaks, 0, start, end)\r\n            : this.drawWave(peaks, 0, start, end);\r\n    }\r\n\r\n    /**\r\n     * Scroll to the beginning\r\n     */\r\n    resetScroll() {\r\n        if (this.wrapper !== null) {\r\n            this.wrapper.scrollLeft = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recenter the view-port at a certain percent of the waveform\r\n     *\r\n     * @param {number} percent Value from 0 to 1 on the waveform\r\n     */\r\n    recenter(percent) {\r\n        const position = this.wrapper.scrollWidth * percent;\r\n        this.recenterOnPosition(position, true);\r\n    }\r\n\r\n    /**\r\n     * Recenter the view-port on a position, either scroll there immediately or\r\n     * in steps of 5 pixels\r\n     *\r\n     * @param {number} position X-offset in pixels\r\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\r\n     */\r\n    recenterOnPosition(position, immediate) {\r\n        const scrollLeft = this.wrapper.scrollLeft;\r\n        const half = ~~(this.wrapper.clientWidth / 2);\r\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n        let target = position - half;\r\n        let offset = target - scrollLeft;\r\n\r\n        if (maxScroll == 0) {\r\n            // no need to continue if scrollbar is not there\r\n            return;\r\n        }\r\n\r\n        // if the cursor is currently visible...\r\n        if (!immediate && -half <= offset && offset < half) {\r\n            // set rate at which waveform is centered\r\n            let rate = this.params.autoCenterRate;\r\n\r\n            // make rate depend on width of view and length of waveform\r\n            rate /= half;\r\n            rate *= maxScroll;\r\n\r\n            offset = Math.max(-rate, Math.min(rate, offset));\r\n            target = scrollLeft + offset;\r\n        }\r\n\r\n        // limit target to valid range (0 to maxScroll)\r\n        target = Math.max(0, Math.min(maxScroll, target));\r\n        // no use attempting to scroll if we're not moving\r\n        if (target != scrollLeft) {\r\n            this.wrapper.scrollLeft = target;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current scroll position in pixels\r\n     *\r\n     * @return {number} Horizontal scroll position in pixels\r\n     */\r\n    getScrollX() {\r\n        let x = 0;\r\n        if (this.wrapper) {\r\n            const pixelRatio = this.params.pixelRatio;\r\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\r\n\r\n            // In cases of elastic scroll (safari with mouse wheel) you can\r\n            // scroll beyond the limits of the container\r\n            // Calculate and floor the scrollable extent to make sure an out\r\n            // of bounds value is not returned\r\n            // Ticket #1312\r\n            if (this.params.scrollParent) {\r\n                const maxScroll = ~~(\r\n                    this.wrapper.scrollWidth * pixelRatio -\r\n                    this.getWidth()\r\n                );\r\n                x = Math.min(maxScroll, Math.max(0, x));\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Get the width of the container\r\n     *\r\n     * @return {number} The width of the container\r\n     */\r\n    getWidth() {\r\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\r\n    }\r\n\r\n    /**\r\n     * Set the width of the container\r\n     *\r\n     * @param {number} width The new width of the container\r\n     * @return {boolean} Whether the width of the container was updated or not\r\n     */\r\n    setWidth(width) {\r\n        if (this.width == width) {\r\n            return false;\r\n        }\r\n\r\n        this.width = width;\r\n\r\n        if (this.params.fillParent || this.params.scrollParent) {\r\n            this.style(this.wrapper, {\r\n                width: ''\r\n            });\r\n        } else {\r\n            const newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\r\n            this.style(this.wrapper, {\r\n                width: newWidth\r\n            });\r\n        }\r\n\r\n        this.updateSize();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set the height of the container\r\n     *\r\n     * @param {number} height The new height of the container.\r\n     * @return {boolean} Whether the height of the container was updated or not\r\n     */\r\n    setHeight(height) {\r\n        if (height == this.height) {\r\n            return false;\r\n        }\r\n        this.height = height;\r\n\r\n        this.style(this.wrapper, {\r\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\r\n        });\r\n\r\n        this.updateSize();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Called by wavesurfer when progress should be rendered\r\n     *\r\n     * @param {number} progress From 0 to 1\r\n     */\r\n    progress(progress) {\r\n        const minPxDelta = 1 / this.params.pixelRatio;\r\n        const pos = Math.round(progress * this.width) * minPxDelta;\r\n\r\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\r\n            this.lastPos = pos;\r\n\r\n            if (this.params.scrollParent && this.params.autoCenter) {\r\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\r\n                this.recenterOnPosition(\r\n                    newPos,\r\n                    this.params.autoCenterImmediately\r\n                );\r\n            }\r\n\r\n            this.updateProgress(pos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     */\r\n    destroy() {\r\n        this.unAll();\r\n        if (this.wrapper) {\r\n            if (this.wrapper.parentNode == this.container.domElement) {\r\n                this.container.removeChild(this.wrapper.domElement);\r\n            }\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    /* Renderer-specific methods */\r\n\r\n    /**\r\n     * Called after cursor related params have changed.\r\n     *\r\n     * @abstract\r\n     */\r\n    updateCursor() {}\r\n\r\n    /**\r\n     * Called when the size of the container changes so the renderer can adjust\r\n     *\r\n     * @abstract\r\n     */\r\n    updateSize() {}\r\n\r\n    /**\r\n     * Draw a waveform with bars\r\n     *\r\n     * @abstract\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawBars(peaks, channelIndex, start, end) {}\r\n\r\n    /**\r\n     * Draw a waveform\r\n     *\r\n     * @abstract\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\r\n     * rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     */\r\n    drawWave(peaks, channelIndex, start, end) {}\r\n\r\n    /**\r\n     * Clear the waveform\r\n     *\r\n     * @abstract\r\n     */\r\n    clearWave() {}\r\n\r\n    /**\r\n     * Render the new progress\r\n     *\r\n     * @abstract\r\n     * @param {number} position X-Offset of progress position in pixels\r\n     */\r\n    updateProgress(position) {}\r\n}\r\n","/**\r\n * @since 3.0.0\r\n */\r\n\r\nimport style from './util/style';\r\nimport getId from './util/get-id';\r\n\r\n/**\r\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\r\n * and an (optional) progress wave `canvas`.\r\n *\r\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\r\n * render a waveform, depending on the zoom level.\r\n */\r\nexport default class CanvasEntry {\r\n    constructor() {\r\n        /**\r\n         * The wave node\r\n         *\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        this.wave = null;\r\n        /**\r\n         * The wave canvas rendering context\r\n         *\r\n         * @type {CanvasRenderingContext2D}\r\n         */\r\n        this.waveCtx = null;\r\n        /**\r\n         * The (optional) progress wave node\r\n         *\r\n         * @type {HTMLCanvasElement}\r\n         */\r\n        this.progress = null;\r\n        /**\r\n         * The (optional) progress wave canvas rendering context\r\n         *\r\n         * @type {CanvasRenderingContext2D}\r\n         */\r\n        this.progressCtx = null;\r\n        /**\r\n         * Start of the area the canvas should render, between 0 and 1\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.start = 0;\r\n        /**\r\n         * End of the area the canvas should render, between 0 and 1\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.end = 1;\r\n        /**\r\n         * Unique identifier for this entry\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.id = getId(\r\n            typeof this.constructor.name !== 'undefined'\r\n                ? this.constructor.name.toLowerCase() + '_'\r\n                : 'canvasentry_'\r\n        );\r\n        /**\r\n         * Canvas 2d context attributes\r\n         *\r\n         * @type {object}\r\n         */\r\n        this.canvasContextAttributes = {};\r\n    }\r\n\r\n    /**\r\n     * Store the wave canvas element and create the 2D rendering context\r\n     *\r\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\r\n     */\r\n    initWave(element) {\r\n        this.wave = element;\r\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\r\n    }\r\n\r\n    /**\r\n     * Store the progress wave canvas element and create the 2D rendering\r\n     * context\r\n     *\r\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\r\n     */\r\n    initProgress(element) {\r\n        this.progress = element;\r\n        this.progressCtx = this.progress.getContext(\r\n            '2d',\r\n            this.canvasContextAttributes\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions\r\n     *\r\n     * @param {number} elementWidth Width of the entry\r\n     * @param {number} totalWidth Total width of the multi canvas renderer\r\n     * @param {number} width The new width of the element\r\n     * @param {number} height The new height of the element\r\n     */\r\n    updateDimensions(elementWidth, totalWidth, width, height) {\r\n        // where the canvas starts and ends in the waveform, represented as a\r\n        // decimal between 0 and 1\r\n        this.start = this.wave.offsetLeft / totalWidth || 0;\r\n        this.end = this.start + elementWidth / totalWidth;\r\n\r\n        // set wave canvas dimensions\r\n        this.wave.width = width;\r\n        this.wave.height = height;\r\n        let elementSize = { width: elementWidth + 'px' };\r\n        style(this.wave, elementSize);\r\n\r\n        if (this.hasProgressCanvas) {\r\n            // set progress canvas dimensions\r\n            this.progress.width = width;\r\n            this.progress.height = height;\r\n            style(this.progress, elementSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the wave and progress rendering contexts\r\n     */\r\n    clearWave() {\r\n        // wave\r\n        this.waveCtx.clearRect(\r\n            0,\r\n            0,\r\n            this.waveCtx.canvas.width,\r\n            this.waveCtx.canvas.height\r\n        );\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            this.progressCtx.clearRect(\r\n                0,\r\n                0,\r\n                this.progressCtx.canvas.width,\r\n                this.progressCtx.canvas.height\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the fill styles for wave and progress\r\n     * @param {string|string[]} waveColor Fill color for the wave canvas,\r\n     * or an array of colors to apply as a gradient\r\n     * @param {?string|string[]} progressColor Fill color for the progress canvas,\r\n     * or an array of colors to apply as a gradient\r\n     */\r\n    setFillStyles(waveColor, progressColor) {\r\n        this.waveCtx.fillStyle = this.getFillStyle(this.waveCtx, waveColor);\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.progressCtx.fillStyle = this.getFillStyle(this.progressCtx, progressColor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility function to handle wave color arguments\r\n     *\r\n     * When the color argument type is a string or CanvasGradient instance,\r\n     * it will be returned as is. Otherwise, it will be treated as an array,\r\n     * and a new CanvasGradient will be returned\r\n     *\r\n     * @since 6.0.0\r\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\r\n     * @param {string|string[]|CanvasGradient} color Either a single fill color\r\n     *     for the wave canvas, an existing CanvasGradient instance, or an array\r\n     *     of colors to apply as a gradient\r\n     * @returns {string|CanvasGradient} Returns a string fillstyle value, or a\r\n     *     canvas gradient\r\n     */\r\n    getFillStyle(ctx, color) {\r\n        if (typeof color == 'string' || color instanceof CanvasGradient) {\r\n            return color;\r\n        }\r\n\r\n        const waveGradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\r\n        color.forEach((value, index) => waveGradient.addColorStop((index / color.length), value));\r\n\r\n        return waveGradient;\r\n    }\r\n\r\n    /**\r\n     * Set the canvas transforms for wave and progress\r\n     *\r\n     * @param {boolean} vertical Whether to render vertically\r\n     */\r\n    applyCanvasTransforms(vertical) {\r\n        if (vertical) {\r\n            // Reflect the waveform across the line y = -x\r\n            this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\r\n\r\n            if (this.hasProgressCanvas) {\r\n                this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle for wave and progress\r\n     *\r\n     * @param {number} x X start position\r\n     * @param {number} y Y start position\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     * @param {number} radius Radius of the rectangle\r\n     */\r\n    fillRects(x, y, width, height, radius) {\r\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.fillRectToContext(\r\n                this.progressCtx,\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                radius\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the actual rectangle on a `canvas` element\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\r\n     * @param {number} x X start position\r\n     * @param {number} y Y start position\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     * @param {number} radius Radius of the rectangle\r\n     */\r\n    fillRectToContext(ctx, x, y, width, height, radius) {\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        if (radius) {\r\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\r\n        } else {\r\n            ctx.fillRect(x, y, width, height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a rounded rectangle on Canvas\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx Canvas context\r\n     * @param {number} x X-position of the rectangle\r\n     * @param {number} y Y-position of the rectangle\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     * @param {number} radius Radius of the rectangle\r\n     *\r\n     * @return {void}\r\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\r\n     */\r\n    drawRoundedRect(ctx, x, y, width, height, radius) {\r\n        if (height === 0) {\r\n            return;\r\n        }\r\n        // peaks are float values from -1 to 1. Use absolute height values in\r\n        // order to correctly calculate rounded rectangle coordinates\r\n        if (height < 0) {\r\n            height *= -1;\r\n            y -= height;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(x + radius, y);\r\n        ctx.lineTo(x + width - radius, y);\r\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        ctx.lineTo(x + width, y + height - radius);\r\n        ctx.quadraticCurveTo(\r\n            x + width,\r\n            y + height,\r\n            x + width - radius,\r\n            y + height\r\n        );\r\n        ctx.lineTo(x + radius, y + height);\r\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        ctx.lineTo(x, y + radius);\r\n        ctx.quadraticCurveTo(x, y, x + radius, y);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Render the actual wave and progress lines\r\n     *\r\n     * @param {number[]} peaks Array with peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\r\n        this.drawLineToContext(\r\n            this.waveCtx,\r\n            peaks,\r\n            absmax,\r\n            halfH,\r\n            offsetY,\r\n            start,\r\n            end\r\n        );\r\n\r\n        if (this.hasProgressCanvas) {\r\n            this.drawLineToContext(\r\n                this.progressCtx,\r\n                peaks,\r\n                absmax,\r\n                halfH,\r\n                offsetY,\r\n                start,\r\n                end\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the actual waveform line on a `canvas` element\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\r\n     * @param {number[]} peaks Array with peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     */\r\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        const length = peaks.length / 2;\r\n        const first = Math.round(length * this.start);\r\n\r\n        // use one more peak value to make sure we join peaks at ends -- unless,\r\n        // of course, this is the last canvas\r\n        const last = Math.round(length * this.end) + 1;\r\n\r\n        const canvasStart = first;\r\n        const canvasEnd = last;\r\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\r\n\r\n        // optimization\r\n        const halfOffset = halfH + offsetY;\r\n        const absmaxHalf = absmax / halfH;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\r\n\r\n        ctx.lineTo(\r\n            (canvasStart - first) * scale,\r\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\r\n        );\r\n\r\n        let i, peak, h;\r\n        for (i = canvasStart; i < canvasEnd; i++) {\r\n            peak = peaks[2 * i] || 0;\r\n            h = Math.round(peak / absmaxHalf);\r\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\r\n        }\r\n\r\n        // draw the bottom edge going backwards, to make a single\r\n        // closed hull to fill\r\n        let j = canvasEnd - 1;\r\n        for (j; j >= canvasStart; j--) {\r\n            peak = peaks[2 * j + 1] || 0;\r\n            h = Math.round(peak / absmaxHalf);\r\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\r\n        }\r\n\r\n        ctx.lineTo(\r\n            (canvasStart - first) * scale,\r\n            halfOffset -\r\n            Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\r\n        );\r\n\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Destroys this entry\r\n     */\r\n    destroy() {\r\n        this.waveCtx = null;\r\n        this.wave = null;\r\n\r\n        this.progressCtx = null;\r\n        this.progress = null;\r\n    }\r\n\r\n    /**\r\n     * Return image data of the wave `canvas` element\r\n     *\r\n     * When using a `type` of `'blob'`, this will return a `Promise` that\r\n     * resolves with a `Blob` instance.\r\n     *\r\n     * @param {string} format='image/png' An optional value of a format type.\r\n     * @param {number} quality=0.92 An optional value between 0 and 1.\r\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\r\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\r\n     * returns a data URL. When using the `'blob'` `type` this returns a\r\n     * `Promise` that resolves with a `Blob` instance.\r\n     */\r\n    getImage(format, quality, type) {\r\n        if (type === 'blob') {\r\n            return new Promise(resolve => {\r\n                this.wave.toBlob(resolve, format, quality);\r\n            });\r\n        } else if (type === 'dataURL') {\r\n            return this.wave.toDataURL(format, quality);\r\n        }\r\n    }\r\n}\r\n","import Drawer from './drawer';\r\nimport * as util from './util';\r\nimport CanvasEntry from './drawer.canvasentry';\r\n\r\n/**\r\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\r\n * builtin renderer.\r\n *\r\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\r\n * on the zoom level.\r\n */\r\nexport default class MultiCanvas extends Drawer {\r\n    /**\r\n     * @param {HTMLElement} container The container node of the wavesurfer instance\r\n     * @param {WavesurferParams} params The wavesurfer initialisation options\r\n     */\r\n    constructor(container, params) {\r\n        super(container, params);\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.maxCanvasWidth = params.maxCanvasWidth;\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.maxCanvasElementWidth = Math.round(\r\n            params.maxCanvasWidth / params.pixelRatio\r\n        );\r\n\r\n        /**\r\n         * Whether or not the progress wave is rendered. If the `waveColor`\r\n         * and `progressColor` are the same color it is not.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.halfPixel = 0.5 / params.pixelRatio;\r\n\r\n        /**\r\n         * List of `CanvasEntry` instances.\r\n         *\r\n         * @type {Array}\r\n         */\r\n        this.canvases = [];\r\n\r\n        /**\r\n         * @type {HTMLElement}\r\n         */\r\n        this.progressWave = null;\r\n\r\n        /**\r\n         * Class used to generate entries.\r\n         *\r\n         * @type {function}\r\n         */\r\n        this.EntryClass = CanvasEntry;\r\n\r\n        /**\r\n         * Canvas 2d context attributes.\r\n         *\r\n         * @type {object}\r\n         */\r\n        this.canvasContextAttributes = params.drawingContextAttributes;\r\n\r\n        /**\r\n         * Overlap added between entries to prevent vertical white stripes\r\n         * between `canvas` elements.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\r\n\r\n        /**\r\n         * The radius of the wave bars. Makes bars rounded\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.barRadius = params.barRadius || 0;\r\n\r\n        /**\r\n         * Whether to render the waveform vertically. Defaults to false.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.vertical = params.vertical;\r\n    }\r\n\r\n    /**\r\n     * Initialize the drawer\r\n     */\r\n    init() {\r\n        this.createWrapper();\r\n        this.createElements();\r\n    }\r\n\r\n    /**\r\n     * Create the canvas elements and style them\r\n     *\r\n     */\r\n    createElements() {\r\n        this.progressWave = util.withOrientation(\r\n            this.wrapper.appendChild(document.createElement('wave')),\r\n            this.params.vertical\r\n        );\r\n        this.style(this.progressWave, {\r\n            position: 'absolute',\r\n            zIndex: 3,\r\n            left: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            overflow: 'hidden',\r\n            width: '0',\r\n            display: 'none',\r\n            boxSizing: 'border-box',\r\n            borderRightStyle: 'solid',\r\n            pointerEvents: 'none'\r\n        });\r\n\r\n        this.addCanvas();\r\n        this.updateCursor();\r\n    }\r\n\r\n    /**\r\n     * Update cursor style\r\n     */\r\n    updateCursor() {\r\n        this.style(this.progressWave, {\r\n            borderRightWidth: this.params.cursorWidth + 'px',\r\n            borderRightColor: this.params.cursorColor\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adjust to the updated size by adding or removing canvases\r\n     */\r\n    updateSize() {\r\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\r\n        const requiredCanvases = Math.ceil(\r\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\r\n        );\r\n\r\n        // add required canvases\r\n        while (this.canvases.length < requiredCanvases) {\r\n            this.addCanvas();\r\n        }\r\n\r\n        // remove older existing canvases, if any\r\n        while (this.canvases.length > requiredCanvases) {\r\n            this.removeCanvas();\r\n        }\r\n\r\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\r\n        const lastCanvas = this.canvases.length - 1;\r\n        this.canvases.forEach((entry, i) => {\r\n            if (i == lastCanvas) {\r\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\r\n            }\r\n            this.updateDimensions(entry, canvasWidth, this.height);\r\n\r\n            entry.clearWave();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a canvas to the canvas list\r\n     *\r\n     */\r\n    addCanvas() {\r\n        const entry = new this.EntryClass();\r\n        entry.canvasContextAttributes = this.canvasContextAttributes;\r\n        entry.hasProgressCanvas = this.hasProgressCanvas;\r\n        entry.halfPixel = this.halfPixel;\r\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\r\n\r\n        // wave\r\n        let wave = util.withOrientation(\r\n            this.wrapper.appendChild(document.createElement('canvas')),\r\n            this.params.vertical\r\n        );\r\n        this.style(wave, {\r\n            position: 'absolute',\r\n            zIndex: 2,\r\n            left: leftOffset + 'px',\r\n            top: 0,\r\n            bottom: 0,\r\n            height: '100%',\r\n            pointerEvents: 'none'\r\n        });\r\n        entry.initWave(wave);\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            let progress = util.withOrientation(\r\n                this.progressWave.appendChild(document.createElement('canvas')),\r\n                this.params.vertical\r\n            );\r\n            this.style(progress, {\r\n                position: 'absolute',\r\n                left: leftOffset + 'px',\r\n                top: 0,\r\n                bottom: 0,\r\n                height: '100%'\r\n            });\r\n            entry.initProgress(progress);\r\n        }\r\n\r\n        this.canvases.push(entry);\r\n    }\r\n\r\n    /**\r\n     * Pop single canvas from the list\r\n     *\r\n     */\r\n    removeCanvas() {\r\n        let lastEntry = this.canvases[this.canvases.length - 1];\r\n\r\n        // wave\r\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement);\r\n\r\n        // progress\r\n        if (this.hasProgressCanvas) {\r\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\r\n        }\r\n\r\n        // cleanup\r\n        if (lastEntry) {\r\n            lastEntry.destroy();\r\n            lastEntry = null;\r\n        }\r\n\r\n        this.canvases.pop();\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions of a canvas element\r\n     *\r\n     * @param {CanvasEntry} entry Target entry\r\n     * @param {number} width The new width of the element\r\n     * @param {number} height The new height of the element\r\n     */\r\n    updateDimensions(entry, width, height) {\r\n        const elementWidth = Math.round(width / this.params.pixelRatio);\r\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\r\n\r\n        // update canvas dimensions\r\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\r\n\r\n        // style element\r\n        this.style(this.progressWave, { display: 'block' });\r\n    }\r\n\r\n    /**\r\n     * Clear the whole multi-canvas\r\n     */\r\n    clearWave() {\r\n        util.frame(() => {\r\n            this.canvases.forEach(entry => entry.clearWave());\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * Draw a waveform with bars\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0. Must be an integer.\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @returns {void}\r\n     */\r\n    drawBars(peaks, channelIndex, start, end) {\r\n        return this.prepareDraw(\r\n            peaks,\r\n            channelIndex,\r\n            start,\r\n            end,\r\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex: ch }) => {\r\n                // if drawBars was called within ws.empty we don't pass a start and\r\n                // don't want anything to happen\r\n                if (start === undefined) {\r\n                    return;\r\n                }\r\n                // Skip every other value if there are negatives.\r\n                const peakIndexScale = hasMinVals ? 2 : 1;\r\n                const length = peaks.length / peakIndexScale;\r\n                const bar = this.params.barWidth * this.params.pixelRatio;\r\n                const gap =\r\n                    this.params.barGap === null\r\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\r\n                        : Math.max(\r\n                            this.params.pixelRatio,\r\n                            this.params.barGap * this.params.pixelRatio\r\n                        );\r\n                const step = bar + gap;\r\n\r\n                const scale = length / this.width;\r\n                const first = start;\r\n                const last = end;\r\n                let peakIndex = first;\r\n                for (peakIndex; peakIndex < last; peakIndex += step) {\r\n\r\n                    // search for the highest peak in the range this bar falls into\r\n                    let peak = 0;\r\n                    let peakIndexRange = Math.floor(peakIndex * scale) * peakIndexScale; // start index\r\n                    const peakIndexEnd = Math.floor((peakIndex + step) * scale) * peakIndexScale;\r\n                    do { // do..while makes sure at least one peak is always evaluated\r\n                        const newPeak = Math.abs(peaks[peakIndexRange]); // for arrays starting with negative values\r\n                        if (newPeak > peak) {\r\n                            peak = newPeak; // higher\r\n                        }\r\n                        peakIndexRange += peakIndexScale; // skip every other value for negatives\r\n                    } while (peakIndexRange < peakIndexEnd);\r\n\r\n                    // calculate the height of this bar according to the highest peak found\r\n                    let h = Math.round((peak / absmax) * halfH);\r\n\r\n                    // in case of silences, allow the user to specify that we\r\n                    // always draw *something* (normally a 1px high bar)\r\n                    if (h == 0 && this.params.barMinHeight) {\r\n                        h = this.params.barMinHeight;\r\n                    }\r\n\r\n                    this.fillRect(\r\n                        peakIndex + this.halfPixel,\r\n                        halfH - h + offsetY,\r\n                        bar + this.halfPixel,\r\n                        h * 2,\r\n                        this.barRadius,\r\n                        ch\r\n                    );\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw a waveform\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\r\n     * for split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number?} start The x-offset of the beginning of the area that\r\n     * should be rendered (If this isn't set only a flat line is rendered)\r\n     * @param {number?} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @returns {void}\r\n     */\r\n    drawWave(peaks, channelIndex, start, end) {\r\n        return this.prepareDraw(\r\n            peaks,\r\n            channelIndex,\r\n            start,\r\n            end,\r\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\r\n                if (!hasMinVals) {\r\n                    const reflectedPeaks = [];\r\n                    const len = peaks.length;\r\n                    let i = 0;\r\n                    for (i; i < len; i++) {\r\n                        reflectedPeaks[2 * i] = peaks[i];\r\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\r\n                    }\r\n                    peaks = reflectedPeaks;\r\n                }\r\n\r\n                // if drawWave was called within ws.empty we don't pass a start and\r\n                // end and simply want a flat line\r\n                if (start !== undefined) {\r\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\r\n                }\r\n\r\n                // always draw a median line\r\n                this.fillRect(\r\n                    0,\r\n                    halfH + offsetY - this.halfPixel,\r\n                    this.width,\r\n                    this.halfPixel,\r\n                    this.barRadius,\r\n                    channelIndex\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Tell the canvas entries to render their portion of the waveform\r\n     *\r\n     * @param {number[]} peaks Peaks data\r\n     * @param {number} absmax Maximum peak value (absolute)\r\n     * @param {number} halfH Half the height of the waveform\r\n     * @param {number} offsetY Offset to the top\r\n     * @param {number} start The x-offset of the beginning of the area that\r\n     * should be rendered\r\n     * @param {number} end The x-offset of the end of the area that\r\n     * should be rendered\r\n     * @param {channelIndex} channelIndex The channel index of the line drawn\r\n     */\r\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\r\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\r\n        this.canvases.forEach((entry, i) => {\r\n            this.setFillStyles(entry, waveColor, progressColor);\r\n            this.applyCanvasTransforms(entry, this.params.vertical);\r\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle on the multi-canvas\r\n     *\r\n     * @param {number} x X-position of the rectangle\r\n     * @param {number} y Y-position of the rectangle\r\n     * @param {number} width Width of the rectangle\r\n     * @param {number} height Height of the rectangle\r\n     * @param {number} radius Radius of the rectangle\r\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\r\n     */\r\n    fillRect(x, y, width, height, radius, channelIndex) {\r\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\r\n        const endCanvas = Math.min(\r\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\r\n            this.canvases.length\r\n        );\r\n        let i = startCanvas;\r\n        for (i; i < endCanvas; i++) {\r\n            const entry = this.canvases[i];\r\n            const leftOffset = i * this.maxCanvasWidth;\r\n\r\n            const intersection = {\r\n                x1: Math.max(x, i * this.maxCanvasWidth),\r\n                y1: y,\r\n                x2: Math.min(\r\n                    x + width,\r\n                    i * this.maxCanvasWidth + entry.wave.width\r\n                ),\r\n                y2: y + height\r\n            };\r\n\r\n            if (intersection.x1 < intersection.x2) {\r\n                const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\r\n                this.setFillStyles(entry, waveColor, progressColor);\r\n                this.applyCanvasTransforms(entry, this.params.vertical);\r\n\r\n                entry.fillRects(\r\n                    intersection.x1 - leftOffset,\r\n                    intersection.y1,\r\n                    intersection.x2 - intersection.x1,\r\n                    intersection.y2 - intersection.y1,\r\n                    radius\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether to hide the channel from being drawn based on params.\r\n     *\r\n     * @param {number} channelIndex The index of the current channel.\r\n     * @returns {bool} True to hide the channel, false to draw.\r\n     */\r\n    hideChannel(channelIndex) {\r\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\r\n    }\r\n\r\n    /**\r\n     * Performs preparation tasks and calculations which are shared by `drawBars`\r\n     * and `drawWave`\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\r\n     * split channel rendering\r\n     * @param {number} channelIndex The index of the current channel. Normally\r\n     * should be 0\r\n     * @param {number?} start The x-offset of the beginning of the area that\r\n     * should be rendered. If this isn't set only a flat line is rendered\r\n     * @param {number?} end The x-offset of the end of the area that should be\r\n     * rendered\r\n     * @param {function} fn The render function to call, e.g. `drawWave`\r\n     * @param {number} drawIndex The index of the current channel after filtering.\r\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\r\n     * @returns {void}\r\n     */\r\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\r\n        return util.frame(() => {\r\n            // Split channels and call this function with the channelIndex set\r\n            if (peaks[0] instanceof Array) {\r\n                const channels = peaks;\r\n\r\n                if (this.params.splitChannels) {\r\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\r\n                    if (!this.params.splitChannelsOptions.overlay) {\r\n                        this.setHeight(\r\n                            Math.max(filteredChannels.length, 1) *\r\n                                this.params.height *\r\n                                this.params.pixelRatio\r\n                        );\r\n                    }\r\n\r\n                    let overallAbsMax;\r\n                    if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.relativeNormalization) {\r\n                        // calculate maximum peak across channels to use for normalization\r\n                        overallAbsMax = util.max(channels.map((channelPeaks => util.absMax(channelPeaks))));\r\n                    }\r\n\r\n\r\n                    return channels.forEach((channelPeaks, i) =>\r\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax)\r\n                    );\r\n                }\r\n                peaks = channels[0];\r\n            }\r\n\r\n            // Return and do not draw channel peaks if hidden.\r\n            if (this.hideChannel(channelIndex)) {\r\n                return;\r\n            }\r\n\r\n            // calculate maximum modulation value, either from the barHeight\r\n            // parameter or if normalize=true from the largest value in the peak\r\n            // set\r\n            let absmax = 1 / this.params.barHeight;\r\n            if (this.params.normalize) {\r\n                absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\r\n            }\r\n\r\n            // Bar wave draws the bottom only as a reflection of the top,\r\n            // so we don't need negative values\r\n            const hasMinVals = [].some.call(peaks, val => val < 0);\r\n            const height = this.params.height * this.params.pixelRatio;\r\n            const halfH = height / 2;\r\n\r\n            let offsetY = height * drawIndex || 0;\r\n\r\n            // Override offsetY if overlay is true\r\n            if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.overlay) {\r\n                offsetY = 0;\r\n            }\r\n\r\n            return fn({\r\n                absmax: absmax,\r\n                hasMinVals: hasMinVals,\r\n                height: height,\r\n                offsetY: offsetY,\r\n                halfH: halfH,\r\n                peaks: peaks,\r\n                channelIndex: channelIndex\r\n            });\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * Set the fill styles for a certain entry (wave and progress)\r\n     *\r\n     * @param {CanvasEntry} entry Target entry\r\n     * @param {string} waveColor Wave color to draw this entry\r\n     * @param {string} progressColor Progress color to draw this entry\r\n     */\r\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\r\n        entry.setFillStyles(waveColor, progressColor);\r\n    }\r\n\r\n    /**\r\n     * Set the canvas transforms for a certain entry (wave and progress)\r\n     *\r\n     * @param {CanvasEntry} entry Target entry\r\n     * @param {boolean} vertical Whether to render the waveform vertically\r\n     */\r\n    applyCanvasTransforms(entry, vertical = false) {\r\n        entry.applyCanvasTransforms(vertical);\r\n    }\r\n\r\n    /**\r\n     * Return image data of the multi-canvas\r\n     *\r\n     * When using a `type` of `'blob'`, this will return a `Promise`.\r\n     *\r\n     * @param {string} format='image/png' An optional value of a format type.\r\n     * @param {number} quality=0.92 An optional value between 0 and 1.\r\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\r\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\r\n     * `type` this returns a single data URL or an array of data URLs,\r\n     * one for each canvas. When using the `'blob'` `type` this returns a\r\n     * `Promise` that resolves with an array of `Blob` instances, one for each\r\n     * canvas.\r\n     */\r\n    getImage(format, quality, type) {\r\n        if (type === 'blob') {\r\n            return Promise.all(\r\n                this.canvases.map(entry => {\r\n                    return entry.getImage(format, quality, type);\r\n                })\r\n            );\r\n        } else if (type === 'dataURL') {\r\n            let images = this.canvases.map(entry =>\r\n                entry.getImage(format, quality, type)\r\n            );\r\n            return images.length > 1 ? images : images[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the new progress\r\n     *\r\n     * @param {number} position X-offset of progress position in pixels\r\n     */\r\n    updateProgress(position) {\r\n        this.style(this.progressWave, { width: position + 'px' });\r\n    }\r\n}\r\n","import * as util from './util';\r\n\r\n// using constants to prevent someone writing the string wrong\r\nconst PLAYING = 'playing';\r\nconst PAUSED = 'paused';\r\nconst FINISHED = 'finished';\r\n\r\n/**\r\n * WebAudio backend\r\n *\r\n * @extends {Observer}\r\n */\r\nexport default class WebAudio extends util.Observer {\r\n    /** scriptBufferSize: size of the processing buffer */\r\n    static scriptBufferSize = 256;\r\n    /** audioContext: allows to process audio with WebAudio API */\r\n    audioContext = null;\r\n    /** @private */\r\n    offlineAudioContext = null;\r\n    /** @private */\r\n    stateBehaviors = {\r\n        [PLAYING]: {\r\n            init() {\r\n                this.addOnAudioProcess();\r\n            },\r\n            getPlayedPercents() {\r\n                const duration = this.getDuration();\r\n                return this.getCurrentTime() / duration || 0;\r\n            },\r\n            getCurrentTime() {\r\n                return this.startPosition + this.getPlayedTime();\r\n            }\r\n        },\r\n        [PAUSED]: {\r\n            init() {\r\n                this.removeOnAudioProcess();\r\n            },\r\n            getPlayedPercents() {\r\n                const duration = this.getDuration();\r\n                return this.getCurrentTime() / duration || 0;\r\n            },\r\n            getCurrentTime() {\r\n                return this.startPosition;\r\n            }\r\n        },\r\n        [FINISHED]: {\r\n            init() {\r\n                this.removeOnAudioProcess();\r\n                this.fireEvent('finish');\r\n            },\r\n            getPlayedPercents() {\r\n                return 1;\r\n            },\r\n            getCurrentTime() {\r\n                return this.getDuration();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Does the browser support this backend\r\n     *\r\n     * @return {boolean} Whether or not this browser supports this backend\r\n     */\r\n    supportsWebAudio() {\r\n        return !!(window.AudioContext || window.webkitAudioContext);\r\n    }\r\n\r\n    /**\r\n     * Get the audio context used by this backend or create one\r\n     *\r\n     * @return {AudioContext} Existing audio context, or creates a new one\r\n     */\r\n    getAudioContext() {\r\n        if (!window.WaveSurferAudioContext) {\r\n            window.WaveSurferAudioContext = new (window.AudioContext ||\r\n                window.webkitAudioContext)();\r\n        }\r\n        return window.WaveSurferAudioContext;\r\n    }\r\n\r\n    /**\r\n     * Get the offline audio context used by this backend or create one\r\n     *\r\n     * @param {number} sampleRate The sample rate to use\r\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\r\n     * a new one\r\n     */\r\n    getOfflineAudioContext(sampleRate) {\r\n        if (!window.WaveSurferOfflineAudioContext) {\r\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\r\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\r\n        }\r\n        return window.WaveSurferOfflineAudioContext;\r\n    }\r\n\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params Wavesurfer parameters\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        /** @private */\r\n        this.params = params;\r\n        /** ac: Audio Context instance */\r\n        this.ac =\r\n            params.audioContext ||\r\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\r\n        /**@private */\r\n        this.lastPlay = this.ac.currentTime;\r\n        /** @private */\r\n        this.startPosition = 0;\r\n        /** @private */\r\n        this.scheduledPause = null;\r\n        /** @private */\r\n        this.states = {\r\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\r\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\r\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\r\n        };\r\n        /** @private */\r\n        this.buffer = null;\r\n        /** @private */\r\n        this.filters = [];\r\n        /** gainNode: allows to control audio volume */\r\n        this.gainNode = null;\r\n        /** @private */\r\n        this.mergedPeaks = null;\r\n        /** @private */\r\n        this.offlineAc = null;\r\n        /** @private */\r\n        this.peaks = null;\r\n        /** @private */\r\n        this.playbackRate = 1;\r\n        /** analyser: provides audio analysis information */\r\n        this.analyser = null;\r\n        /** scriptNode: allows processing audio */\r\n        this.scriptNode = null;\r\n        /** @private */\r\n        this.source = null;\r\n        /** @private */\r\n        this.splitPeaks = [];\r\n        /** @private */\r\n        this.state = null;\r\n        /** @private */\r\n        this.explicitDuration = params.duration;\r\n        /**\r\n         * Boolean indicating if the backend was destroyed.\r\n         */\r\n        this.destroyed = false;\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.createVolumeNode();\r\n        this.createScriptNode();\r\n        this.createAnalyserNode();\r\n\r\n        this.setState(PAUSED);\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.setLength(0);\r\n    }\r\n\r\n    /** @private */\r\n    disconnectFilters() {\r\n        if (this.filters) {\r\n            this.filters.forEach(filter => {\r\n                filter && filter.disconnect();\r\n            });\r\n            this.filters = null;\r\n            // Reconnect direct path\r\n            this.analyser.connect(this.gainNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * @param {string} state The new state\r\n     */\r\n    setState(state) {\r\n        if (this.state !== this.states[state]) {\r\n            this.state = this.states[state];\r\n            this.state.init.call(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unpacked `setFilters()`\r\n     *\r\n     * @param {...AudioNode} filters One or more filters to set\r\n     */\r\n    setFilter(...filters) {\r\n        this.setFilters(filters);\r\n    }\r\n\r\n    /**\r\n     * Insert custom Web Audio nodes into the graph\r\n     *\r\n     * @param {AudioNode[]} filters Packed filters array\r\n     * @example\r\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\r\n     * wavesurfer.backend.setFilter(lowpass);\r\n     */\r\n    setFilters(filters) {\r\n        // Remove existing filters\r\n        this.disconnectFilters();\r\n\r\n        // Insert filters if filter array not empty\r\n        if (filters && filters.length) {\r\n            this.filters = filters;\r\n\r\n            // Disconnect direct path before inserting filters\r\n            this.analyser.disconnect();\r\n\r\n            // Connect each filter in turn\r\n            filters\r\n                .reduce((prev, curr) => {\r\n                    prev.connect(curr);\r\n                    return curr;\r\n                }, this.analyser)\r\n                .connect(this.gainNode);\r\n        }\r\n    }\r\n    /** Create ScriptProcessorNode to process audio */\r\n    createScriptNode() {\r\n        if (this.params.audioScriptProcessor) {\r\n            this.scriptNode = this.params.audioScriptProcessor;\r\n        } else {\r\n            if (this.ac.createScriptProcessor) {\r\n                this.scriptNode = this.ac.createScriptProcessor(\r\n                    WebAudio.scriptBufferSize\r\n                );\r\n            } else {\r\n                this.scriptNode = this.ac.createJavaScriptNode(\r\n                    WebAudio.scriptBufferSize\r\n                );\r\n            }\r\n        }\r\n        this.scriptNode.connect(this.ac.destination);\r\n    }\r\n\r\n    /** @private */\r\n    addOnAudioProcess() {\r\n        this.scriptNode.onaudioprocess = () => {\r\n            const time = this.getCurrentTime();\r\n\r\n            if (time >= this.getDuration()) {\r\n                this.setState(FINISHED);\r\n                this.fireEvent('pause');\r\n            } else if (time >= this.scheduledPause) {\r\n                this.pause();\r\n            } else if (this.state === this.states[PLAYING]) {\r\n                this.fireEvent('audioprocess', time);\r\n            }\r\n        };\r\n    }\r\n\r\n    /** @private */\r\n    removeOnAudioProcess() {\r\n        this.scriptNode.onaudioprocess = null;\r\n    }\r\n    /** Create analyser node to perform audio analysis */\r\n    createAnalyserNode() {\r\n        this.analyser = this.ac.createAnalyser();\r\n        this.analyser.connect(this.gainNode);\r\n    }\r\n\r\n    /**\r\n     * Create the gain node needed to control the playback volume.\r\n     *\r\n     */\r\n    createVolumeNode() {\r\n        // Create gain node using the AudioContext\r\n        if (this.ac.createGain) {\r\n            this.gainNode = this.ac.createGain();\r\n        } else {\r\n            this.gainNode = this.ac.createGainNode();\r\n        }\r\n        // Add the gain node to the graph\r\n        this.gainNode.connect(this.ac.destination);\r\n    }\r\n\r\n    /**\r\n     * Set the sink id for the media player\r\n     *\r\n     * @param {string} deviceId String value representing audio device id.\r\n     * @returns {Promise} A Promise that resolves to `undefined` when there\r\n     * are no errors.\r\n     */\r\n    setSinkId(deviceId) {\r\n        if (deviceId) {\r\n            /**\r\n             * The webaudio API doesn't currently support setting the device\r\n             * output. Here we create an HTMLAudioElement, connect the\r\n             * webaudio stream to that element and setSinkId there.\r\n             */\r\n            let audio = new window.Audio();\r\n            if (!audio.setSinkId) {\r\n                return Promise.reject(\r\n                    new Error('setSinkId is not supported in your browser')\r\n                );\r\n            }\r\n            audio.autoplay = true;\r\n            const dest = this.ac.createMediaStreamDestination();\r\n            this.gainNode.disconnect();\r\n            this.gainNode.connect(dest);\r\n            audio.srcObject = dest.stream;\r\n\r\n            return audio.setSinkId(deviceId);\r\n        } else {\r\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the audio volume\r\n     *\r\n     * @param {number} value A floating point value between 0 and 1.\r\n     */\r\n    setVolume(value) {\r\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\r\n    }\r\n\r\n    /**\r\n     * Get the current volume\r\n     *\r\n     * @return {number} value A floating point value between 0 and 1.\r\n     */\r\n    getVolume() {\r\n        return this.gainNode.gain.value;\r\n    }\r\n\r\n    /**\r\n     * Decode an array buffer and pass data to a callback\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\r\n     * @param {function} callback The function to call on complete.\r\n     * @param {function} errback The function to call on error.\r\n     */\r\n    decodeArrayBuffer(arraybuffer, callback, errback) {\r\n        if (!this.offlineAc) {\r\n            this.offlineAc = this.getOfflineAudioContext(\r\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\r\n            );\r\n        }\r\n        if ('webkitAudioContext' in window) {\r\n            // Safari: no support for Promise-based decodeAudioData enabled\r\n            // Enable it in Safari using the Experimental Features > Modern WebAudio API option\r\n            this.offlineAc.decodeAudioData(\r\n                arraybuffer,\r\n                data => callback(data),\r\n                errback\r\n            );\r\n        } else {\r\n            this.offlineAc.decodeAudioData(arraybuffer).then(\r\n                (data) => callback(data)\r\n            ).catch(\r\n                (err) => errback(err)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set pre-decoded peaks\r\n     *\r\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\r\n     * @param {?number} duration Explicit duration\r\n     */\r\n    setPeaks(peaks, duration) {\r\n        if (duration != null) {\r\n            this.explicitDuration = duration;\r\n        }\r\n        this.peaks = peaks;\r\n    }\r\n\r\n    /**\r\n     * Set the rendered length (different from the length of the audio)\r\n     *\r\n     * @param {number} length The rendered length\r\n     */\r\n    setLength(length) {\r\n        // No resize, we can preserve the cached peaks.\r\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\r\n            return;\r\n        }\r\n\r\n        this.splitPeaks = [];\r\n        this.mergedPeaks = [];\r\n        // Set the last element of the sparse array so the peak arrays are\r\n        // appropriately sized for other calculations.\r\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\r\n        let c;\r\n        for (c = 0; c < channels; c++) {\r\n            this.splitPeaks[c] = [];\r\n            this.splitPeaks[c][2 * (length - 1)] = 0;\r\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\r\n        }\r\n        this.mergedPeaks[2 * (length - 1)] = 0;\r\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\r\n    }\r\n\r\n    /**\r\n     * Compute the max and min value of the waveform when broken into <length> subranges.\r\n     *\r\n     * @param {number} length How many subranges to break the waveform into.\r\n     * @param {number} first First sample in the required range.\r\n     * @param {number} last Last sample in the required range.\r\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\r\n     * peaks consisting of (max, min) values for each subrange.\r\n     */\r\n    getPeaks(length, first, last) {\r\n        if (this.peaks) {\r\n            return this.peaks;\r\n        }\r\n        if (!this.buffer) {\r\n            return [];\r\n        }\r\n\r\n        first = first || 0;\r\n        last = last || length - 1;\r\n\r\n        this.setLength(length);\r\n\r\n        if (!this.buffer) {\r\n            return this.params.splitChannels\r\n                ? this.splitPeaks\r\n                : this.mergedPeaks;\r\n        }\r\n\r\n        /**\r\n         * The following snippet fixes a buffering data issue on the Safari\r\n         * browser which returned undefined It creates the missing buffer based\r\n         * on 1 channel, 4096 samples and the sampleRate from the current\r\n         * webaudio context 4096 samples seemed to be the best fit for rendering\r\n         * will review this code once a stable version of Safari TP is out\r\n         */\r\n        if (!this.buffer.length) {\r\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\r\n            this.buffer = newBuffer.buffer;\r\n        }\r\n\r\n        const sampleSize = this.buffer.length / length;\r\n        const sampleStep = ~~(sampleSize / 10) || 1;\r\n        const channels = this.buffer.numberOfChannels;\r\n        let c;\r\n\r\n        for (c = 0; c < channels; c++) {\r\n            const peaks = this.splitPeaks[c];\r\n            const chan = this.buffer.getChannelData(c);\r\n            let i;\r\n\r\n            for (i = first; i <= last; i++) {\r\n                const start = ~~(i * sampleSize);\r\n                const end = ~~(start + sampleSize);\r\n                /**\r\n                 * Initialize the max and min to the first sample of this\r\n                 * subrange, so that even if the samples are entirely\r\n                 * on one side of zero, we still return the true max and\r\n                 * min values in the subrange.\r\n                 */\r\n                let min = chan[start];\r\n                let max = min;\r\n                let j;\r\n\r\n                for (j = start; j < end; j += sampleStep) {\r\n                    const value = chan[j];\r\n\r\n                    if (value > max) {\r\n                        max = value;\r\n                    }\r\n\r\n                    if (value < min) {\r\n                        min = value;\r\n                    }\r\n                }\r\n\r\n                peaks[2 * i] = max;\r\n                peaks[2 * i + 1] = min;\r\n\r\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\r\n                    this.mergedPeaks[2 * i] = max;\r\n                }\r\n\r\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\r\n                    this.mergedPeaks[2 * i + 1] = min;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\r\n    }\r\n\r\n    /**\r\n     * Get the position from 0 to 1\r\n     *\r\n     * @return {number} Position\r\n     */\r\n    getPlayedPercents() {\r\n        return this.state.getPlayedPercents.call(this);\r\n    }\r\n\r\n    /** @private */\r\n    disconnectSource() {\r\n        if (this.source) {\r\n            this.source.disconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\r\n     */\r\n    destroyWebAudio() {\r\n        this.disconnectFilters();\r\n        this.disconnectSource();\r\n        this.gainNode.disconnect();\r\n        this.scriptNode.disconnect();\r\n        this.analyser.disconnect();\r\n\r\n        // close the audioContext if closeAudioContext option is set to true\r\n        if (this.params.closeAudioContext) {\r\n            // check if browser supports AudioContext.close()\r\n            if (\r\n                typeof this.ac.close === 'function' &&\r\n                this.ac.state != 'closed'\r\n            ) {\r\n                this.ac.close();\r\n            }\r\n            // clear the reference to the audiocontext\r\n            this.ac = null;\r\n            // clear the actual audiocontext, either passed as param or the\r\n            // global singleton\r\n            if (!this.params.audioContext) {\r\n                window.WaveSurferAudioContext = null;\r\n            } else {\r\n                this.params.audioContext = null;\r\n            }\r\n            // clear the offlineAudioContext\r\n            window.WaveSurferOfflineAudioContext = null;\r\n        }\r\n    }\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     */\r\n    destroy() {\r\n        if (!this.isPaused()) {\r\n            this.pause();\r\n        }\r\n        this.unAll();\r\n        this.buffer = null;\r\n        this.destroyed = true;\r\n\r\n        this.destroyWebAudio();\r\n    }\r\n\r\n    /**\r\n     * Loaded a decoded audio buffer\r\n     *\r\n     * @param {Object} buffer Decoded audio buffer to load\r\n     */\r\n    load(buffer) {\r\n        this.startPosition = 0;\r\n        this.lastPlay = this.ac.currentTime;\r\n        this.buffer = buffer;\r\n        this.createSource();\r\n    }\r\n\r\n    /** @private */\r\n    createSource() {\r\n        this.disconnectSource();\r\n        this.source = this.ac.createBufferSource();\r\n\r\n        // adjust for old browsers\r\n        this.source.start = this.source.start || this.source.noteGrainOn;\r\n        this.source.stop = this.source.stop || this.source.noteOff;\r\n\r\n        this.setPlaybackRate(this.playbackRate);\r\n        this.source.buffer = this.buffer;\r\n        this.source.connect(this.analyser);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * some browsers require an explicit call to #resume before they will play back audio\r\n     */\r\n    resumeAudioContext() {\r\n        if (this.ac.state == 'suspended') {\r\n            this.ac.resume && this.ac.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\r\n     *\r\n     * @return {boolean} Whether or not this backend is currently paused\r\n     */\r\n    isPaused() {\r\n        return this.state !== this.states[PLAYING];\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.getDuration()`\r\n     *\r\n     * @return {number} Duration of loaded buffer\r\n     */\r\n    getDuration() {\r\n        if (this.explicitDuration) {\r\n            return this.explicitDuration;\r\n        }\r\n        if (!this.buffer) {\r\n            return 0;\r\n        }\r\n        return this.buffer.duration;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.seekTo()`\r\n     *\r\n     * @param {number} start Position to start at in seconds\r\n     * @param {number} end Position to end at in seconds\r\n     * @return {{start: number, end: number}} Object containing start and end\r\n     * positions\r\n     */\r\n    seekTo(start, end) {\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        this.scheduledPause = null;\r\n\r\n        if (start == null) {\r\n            start = this.getCurrentTime();\r\n            if (start >= this.getDuration()) {\r\n                start = 0;\r\n            }\r\n        }\r\n        if (end == null) {\r\n            end = this.getDuration();\r\n        }\r\n\r\n        this.startPosition = start;\r\n        this.lastPlay = this.ac.currentTime;\r\n\r\n        if (this.state === this.states[FINISHED]) {\r\n            this.setState(PAUSED);\r\n        }\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the playback position in seconds\r\n     *\r\n     * @return {number} The playback position in seconds\r\n     */\r\n    getPlayedTime() {\r\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded audio region.\r\n     *\r\n     * @param {number} start Start offset in seconds, relative to the beginning\r\n     * of a clip.\r\n     * @param {number} end When to stop relative to the beginning of a clip.\r\n     */\r\n    play(start, end) {\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        // need to re-create source on each playback\r\n        this.createSource();\r\n\r\n        const adjustedTime = this.seekTo(start, end);\r\n\r\n        start = adjustedTime.start;\r\n        end = adjustedTime.end;\r\n\r\n        this.scheduledPause = end;\r\n\r\n        this.source.start(0, start);\r\n\r\n        this.resumeAudioContext();\r\n\r\n        this.setState(PLAYING);\r\n\r\n        this.fireEvent('play');\r\n    }\r\n\r\n    /**\r\n     * Pauses the loaded audio.\r\n     */\r\n    pause() {\r\n        this.scheduledPause = null;\r\n\r\n        this.startPosition += this.getPlayedTime();\r\n        try {\r\n            this.source && this.source.stop(0);\r\n        } catch (err) {\r\n            // Calling stop can throw the following 2 errors:\r\n            // - RangeError (The value specified for when is negative.)\r\n            // - InvalidStateNode (The node has not been started by calling start().)\r\n            // We can safely ignore both errors, because:\r\n            // - The range is surely correct\r\n            // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\r\n        }\r\n\r\n        this.setState(PAUSED);\r\n\r\n        this.fireEvent('pause');\r\n    }\r\n\r\n    /**\r\n     * Returns the current time in seconds relative to the audio-clip's\r\n     * duration.\r\n     *\r\n     * @return {number} The current time in seconds\r\n     */\r\n    getCurrentTime() {\r\n        return this.state.getCurrentTime.call(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\r\n     *\r\n     * @return {number} The current playback rate\r\n     */\r\n    getPlaybackRate() {\r\n        return this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Set the audio source playback rate.\r\n     *\r\n     * @param {number} value The playback rate to use\r\n     */\r\n    setPlaybackRate(value) {\r\n        this.playbackRate = value || 1;\r\n        this.source && this.source.playbackRate.setValueAtTime(\r\n            this.playbackRate,\r\n            this.ac.currentTime\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set a point in seconds for playback to stop at.\r\n     *\r\n     * @param {number} end Position to end at\r\n     * @version 3.3.0\r\n     */\r\n    setPlayEnd(end) {\r\n        this.scheduledPause = end;\r\n    }\r\n}\r\n","import WebAudio from './webaudio';\r\nimport * as util from './util';\r\n\r\n/**\r\n * MediaElement backend\r\n */\r\nexport default class MediaElement extends WebAudio {\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params Wavesurfer parameters\r\n     */\r\n    constructor(params) {\r\n        super(params);\r\n        /** @private */\r\n        this.params = params;\r\n\r\n        /**\r\n         * Initially a dummy media element to catch errors. Once `_load` is\r\n         * called, this will contain the actual `HTMLMediaElement`.\r\n         * @private\r\n         */\r\n        this.media = {\r\n            currentTime: 0,\r\n            duration: 0,\r\n            paused: true,\r\n            playbackRate: 1,\r\n            play() {},\r\n            pause() {},\r\n            volume: 0\r\n        };\r\n\r\n        /** @private */\r\n        this.mediaType = params.mediaType.toLowerCase();\r\n        /** @private */\r\n        this.elementPosition = params.elementPosition;\r\n        /** @private */\r\n        this.peaks = null;\r\n        /** @private */\r\n        this.playbackRate = 1;\r\n        /** @private */\r\n        this.volume = 1;\r\n        /** @private */\r\n        this.isMuted = false;\r\n        /** @private */\r\n        this.buffer = null;\r\n        /** @private */\r\n        this.onPlayEnd = null;\r\n        /** @private */\r\n        this.mediaListeners = {};\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.createTimer();\r\n    }\r\n\r\n    /**\r\n     * Attach event listeners to media element.\r\n     */\r\n    _setupMediaListeners() {\r\n        this.mediaListeners.error = () => {\r\n            this.fireEvent('error', 'Error loading media element');\r\n        };\r\n        this.mediaListeners.canplay = () => {\r\n            this.fireEvent('canplay');\r\n        };\r\n        this.mediaListeners.ended = () => {\r\n            this.fireEvent('finish');\r\n        };\r\n        // listen to and relay play, pause and seeked events to enable\r\n        // playback control from the external media element\r\n        this.mediaListeners.play = () => {\r\n            this.fireEvent('play');\r\n        };\r\n        this.mediaListeners.pause = () => {\r\n            this.fireEvent('pause');\r\n        };\r\n        this.mediaListeners.seeked = event => {\r\n            this.fireEvent('seek');\r\n        };\r\n        this.mediaListeners.volumechange = event => {\r\n            this.isMuted = this.media.muted;\r\n            if (this.isMuted) {\r\n                this.volume = 0;\r\n            } else {\r\n                this.volume = this.media.volume;\r\n            }\r\n            this.fireEvent('volume');\r\n        };\r\n\r\n        // reset event listeners\r\n        Object.keys(this.mediaListeners).forEach(id => {\r\n            this.media.removeEventListener(id, this.mediaListeners[id]);\r\n            this.media.addEventListener(id, this.mediaListeners[id]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a timer to provide a more precise `audioprocess` event.\r\n     */\r\n    createTimer() {\r\n        const onAudioProcess = () => {\r\n            if (this.isPaused()) {\r\n                return;\r\n            }\r\n            this.fireEvent('audioprocess', this.getCurrentTime());\r\n\r\n            // Call again in the next frame\r\n            util.frame(onAudioProcess)();\r\n        };\r\n\r\n        this.on('play', onAudioProcess);\r\n\r\n        // Update the progress one more time to prevent it from being stuck in\r\n        // case of lower framerates\r\n        this.on('pause', () => {\r\n            this.fireEvent('audioprocess', this.getCurrentTime());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create media element with url as its source,\r\n     * and append to container element.\r\n     *\r\n     * @param {string} url Path to media file\r\n     * @param {HTMLElement} container HTML element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     * @param {string} preload HTML 5 preload attribute value\r\n     * @throws Will throw an error if the `url` argument is not a valid media\r\n     * element.\r\n     */\r\n    load(url, container, peaks, preload) {\r\n        const media = document.createElement(this.mediaType);\r\n        media.controls = this.params.mediaControls;\r\n        media.autoplay = this.params.autoplay || false;\r\n        media.preload = preload == null ? 'auto' : preload;\r\n        media.src = url;\r\n        media.style.width = '100%';\r\n\r\n        const prevMedia = container.querySelector(this.mediaType);\r\n        if (prevMedia) {\r\n            container.removeChild(prevMedia);\r\n        }\r\n        container.appendChild(media);\r\n\r\n        this._load(media, peaks, preload);\r\n    }\r\n\r\n    /**\r\n     * Load existing media element.\r\n     *\r\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     */\r\n    loadElt(elt, peaks) {\r\n        elt.controls = this.params.mediaControls;\r\n        elt.autoplay = this.params.autoplay || false;\r\n\r\n        this._load(elt, peaks, elt.preload);\r\n    }\r\n\r\n    /**\r\n     * Method called by both `load` (from url)\r\n     * and `loadElt` (existing media element) methods.\r\n     *\r\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     * @param {string} preload HTML 5 preload attribute value\r\n     * @throws Will throw an error if the `media` argument is not a valid media\r\n     * element.\r\n     * @private\r\n     */\r\n    _load(media, peaks, preload) {\r\n        // verify media element is valid\r\n        if (\r\n            !(media instanceof HTMLMediaElement) ||\r\n            typeof media.addEventListener === 'undefined'\r\n        ) {\r\n            throw new Error('media parameter is not a valid media element');\r\n        }\r\n\r\n        // load must be called manually on iOS, otherwise peaks won't draw\r\n        // until a user interaction triggers load --> 'ready' event\r\n        //\r\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\r\n        // as this almost always triggers some browser fetch of the media.\r\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\r\n            // Resets the media element and restarts the media resource. Any\r\n            // pending events are discarded. How much media data is fetched is\r\n            // still affected by the preload attribute.\r\n            media.load();\r\n        }\r\n\r\n        this.media = media;\r\n        this._setupMediaListeners();\r\n        this.peaks = peaks;\r\n        this.onPlayEnd = null;\r\n        this.buffer = null;\r\n        this.isMuted = media.muted;\r\n        this.setPlaybackRate(this.playbackRate);\r\n        this.setVolume(this.volume);\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\r\n     *\r\n     * @return {boolean} Media paused or not\r\n     */\r\n    isPaused() {\r\n        return !this.media || this.media.paused;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.getDuration()`\r\n     *\r\n     * @return {number} Duration\r\n     */\r\n    getDuration() {\r\n        if (this.explicitDuration) {\r\n            return this.explicitDuration;\r\n        }\r\n        let duration = (this.buffer || this.media).duration;\r\n        if (duration >= Infinity) {\r\n            // streaming audio\r\n            duration = this.media.seekable.end(0);\r\n        }\r\n        return duration;\r\n    }\r\n\r\n    /**\r\n     * Returns the current time in seconds relative to the audio-clip's\r\n     * duration.\r\n     *\r\n     * @return {number} Current time\r\n     */\r\n    getCurrentTime() {\r\n        return this.media && this.media.currentTime;\r\n    }\r\n\r\n    /**\r\n     * Get the position from 0 to 1\r\n     *\r\n     * @return {number} Current position\r\n     */\r\n    getPlayedPercents() {\r\n        return this.getCurrentTime() / this.getDuration() || 0;\r\n    }\r\n\r\n    /**\r\n     * Get the audio source playback rate.\r\n     *\r\n     * @return {number} Playback rate\r\n     */\r\n    getPlaybackRate() {\r\n        return this.playbackRate || this.media.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Set the audio source playback rate.\r\n     *\r\n     * @param {number} value Playback rate\r\n     */\r\n    setPlaybackRate(value) {\r\n        this.playbackRate = value || 1;\r\n        this.media.playbackRate = this.playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Used by `wavesurfer.seekTo()`\r\n     *\r\n     * @param {number} start Position to start at in seconds\r\n     */\r\n    seekTo(start) {\r\n        if (start != null && !isNaN(start)) {\r\n            this.media.currentTime = start;\r\n        }\r\n        this.clearPlayEnd();\r\n    }\r\n\r\n    /**\r\n     * Plays the loaded audio region.\r\n     *\r\n     * @param {number} start Start offset in seconds, relative to the beginning\r\n     * of a clip.\r\n     * @param {number} end When to stop, relative to the beginning of a clip.\r\n     * @emits MediaElement#play\r\n     * @return {Promise} Result\r\n     */\r\n    play(start, end) {\r\n        this.seekTo(start);\r\n        const promise = this.media.play();\r\n        end && this.setPlayEnd(end);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Pauses the loaded audio.\r\n     *\r\n     * @emits MediaElement#pause\r\n     * @return {Promise} Result\r\n     */\r\n    pause() {\r\n        let promise;\r\n\r\n        if (this.media) {\r\n            promise = this.media.pause();\r\n        }\r\n        this.clearPlayEnd();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Set the play end\r\n     *\r\n     * @param {number} end Where to end\r\n     */\r\n    setPlayEnd(end) {\r\n        this.clearPlayEnd();\r\n\r\n        this._onPlayEnd = time => {\r\n            if (time >= end) {\r\n                this.pause();\r\n                this.seekTo(end);\r\n            }\r\n        };\r\n        this.on('audioprocess', this._onPlayEnd);\r\n    }\r\n\r\n    /** @private */\r\n    clearPlayEnd() {\r\n        if (this._onPlayEnd) {\r\n            this.un('audioprocess', this._onPlayEnd);\r\n            this._onPlayEnd = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the max and min value of the waveform when broken into\r\n     * <length> subranges.\r\n     *\r\n     * @param {number} length How many subranges to break the waveform into.\r\n     * @param {number} first First sample in the required range.\r\n     * @param {number} last Last sample in the required range.\r\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\r\n     * arrays of peaks consisting of (max, min) values for each subrange.\r\n     */\r\n    getPeaks(length, first, last) {\r\n        if (this.buffer) {\r\n            return super.getPeaks(length, first, last);\r\n        }\r\n        return this.peaks || [];\r\n    }\r\n\r\n    /**\r\n     * Set the sink id for the media player\r\n     *\r\n     * @param {string} deviceId String value representing audio device id.\r\n     * @returns {Promise} A Promise that resolves to `undefined` when there\r\n     * are no errors.\r\n     */\r\n    setSinkId(deviceId) {\r\n        if (deviceId) {\r\n            if (!this.media.setSinkId) {\r\n                return Promise.reject(\r\n                    new Error('setSinkId is not supported in your browser')\r\n                );\r\n            }\r\n            return this.media.setSinkId(deviceId);\r\n        }\r\n\r\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\r\n    }\r\n\r\n    /**\r\n     * Get the current volume\r\n     *\r\n     * @return {number} value A floating point value between 0 and 1.\r\n     */\r\n    getVolume() {\r\n        return this.volume;\r\n    }\r\n\r\n    /**\r\n     * Set the audio volume\r\n     *\r\n     * @param {number} value A floating point value between 0 and 1.\r\n     */\r\n    setVolume(value) {\r\n        this.volume = value;\r\n        // no need to change when it's already at that volume\r\n        if (this.media.volume !== this.volume) {\r\n            this.media.volume = this.volume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable muted audio\r\n     *\r\n     * @since 4.0.0\r\n     * @param {boolean} muted Specify `true` to mute audio.\r\n     */\r\n    setMute(muted) {\r\n        // This causes a volume change to be emitted too through the\r\n        // volumechange event listener.\r\n        this.isMuted = this.media.muted = muted;\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     *\r\n     */\r\n    destroy() {\r\n        this.pause();\r\n        this.unAll();\r\n        this.destroyed = true;\r\n\r\n        // cleanup media event listeners\r\n        Object.keys(this.mediaListeners).forEach(id => {\r\n            if (this.media) {\r\n                this.media.removeEventListener(id, this.mediaListeners[id]);\r\n            }\r\n        });\r\n\r\n        if (\r\n            this.params.removeMediaElementOnDestroy &&\r\n            this.media &&\r\n            this.media.parentNode\r\n        ) {\r\n            this.media.parentNode.removeChild(this.media);\r\n        }\r\n\r\n        this.media = null;\r\n    }\r\n}\r\n","/**\r\n * Caches the decoded peaks data to improve rendering speed for large audio\r\n *\r\n * Is used if the option parameter `partialRender` is set to `true`\r\n */\r\nexport default class PeakCache {\r\n    /**\r\n     * Instantiate cache\r\n     */\r\n    constructor() {\r\n        this.clearPeakCache();\r\n    }\r\n\r\n    /**\r\n     * Empty the cache\r\n     */\r\n    clearPeakCache() {\r\n        /**\r\n         * Flat array with entries that are always in pairs to mark the\r\n         * beginning and end of each subrange.  This is a convenience so we can\r\n         * iterate over the pairs for easy set difference operations.\r\n         * @private\r\n         */\r\n        this.peakCacheRanges = [];\r\n        /**\r\n         * Length of the entire cachable region, used for resetting the cache\r\n         * when this changes (zoom events, for instance).\r\n         * @private\r\n         */\r\n        this.peakCacheLength = -1;\r\n    }\r\n\r\n    /**\r\n     * Add a range of peaks to the cache\r\n     *\r\n     * @param {number} length The length of the range\r\n     * @param {number} start The x offset of the start of the range\r\n     * @param {number} end The x offset of the end of the range\r\n     * @return {Number.<Array[]>} Array with arrays of numbers\r\n     */\r\n    addRangeToPeakCache(length, start, end) {\r\n        if (length != this.peakCacheLength) {\r\n            this.clearPeakCache();\r\n            this.peakCacheLength = length;\r\n        }\r\n\r\n        // Return ranges that weren't in the cache before the call.\r\n        let uncachedRanges = [];\r\n        let i = 0;\r\n        // Skip ranges before the current start.\r\n        while (\r\n            i < this.peakCacheRanges.length &&\r\n            this.peakCacheRanges[i] < start\r\n        ) {\r\n            i++;\r\n        }\r\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\r\n        // |start| falls between an existing range, and the uncached region\r\n        // starts when we encounter the next node in |peakCacheRanges| or\r\n        // |end|, whichever comes first.\r\n        if (i % 2 == 0) {\r\n            uncachedRanges.push(start);\r\n        }\r\n        while (\r\n            i < this.peakCacheRanges.length &&\r\n            this.peakCacheRanges[i] <= end\r\n        ) {\r\n            uncachedRanges.push(this.peakCacheRanges[i]);\r\n            i++;\r\n        }\r\n        // If |i| is even, |end| is after all existing ranges.\r\n        if (i % 2 == 0) {\r\n            uncachedRanges.push(end);\r\n        }\r\n\r\n        // Filter out the 0-length ranges.\r\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\r\n            if (pos == 0) {\r\n                return item != arr[pos + 1];\r\n            } else if (pos == arr.length - 1) {\r\n                return item != arr[pos - 1];\r\n            }\r\n            return item != arr[pos - 1] && item != arr[pos + 1];\r\n        });\r\n\r\n        // Merge the two ranges together, uncachedRanges will either contain\r\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\r\n        // duplicates are detected, remove both and extend the range.\r\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\r\n        this.peakCacheRanges = this.peakCacheRanges\r\n            .sort((a, b) => a - b)\r\n            .filter((item, pos, arr) => {\r\n                if (pos == 0) {\r\n                    return item != arr[pos + 1];\r\n                } else if (pos == arr.length - 1) {\r\n                    return item != arr[pos - 1];\r\n                }\r\n                return item != arr[pos - 1] && item != arr[pos + 1];\r\n            });\r\n\r\n        // Push the uncached ranges into an array of arrays for ease of\r\n        // iteration in the functions that call this.\r\n        const uncachedRangePairs = [];\r\n        for (i = 0; i < uncachedRanges.length; i += 2) {\r\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\r\n        }\r\n\r\n        return uncachedRangePairs;\r\n    }\r\n\r\n    /**\r\n     * For testing\r\n     *\r\n     * @return {Number.<Array[]>} Array with arrays of numbers\r\n     */\r\n    getCacheRanges() {\r\n        const peakCacheRangePairs = [];\r\n        let i;\r\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\r\n            peakCacheRangePairs.push([\r\n                this.peakCacheRanges[i],\r\n                this.peakCacheRanges[i + 1]\r\n            ]);\r\n        }\r\n        return peakCacheRangePairs;\r\n    }\r\n}\r\n","import MediaElement from './mediaelement';\r\n\r\n/**\r\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\r\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\r\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\r\n * of the webaudio API.\r\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\r\n *\r\n * @since 3.2.0\r\n */\r\nexport default class MediaElementWebAudio extends MediaElement {\r\n    /**\r\n     * Construct the backend\r\n     *\r\n     * @param {WavesurferParams} params Wavesurfer parameters\r\n     */\r\n    constructor(params) {\r\n        super(params);\r\n        /** @private */\r\n        this.params = params;\r\n        /** @private */\r\n        this.sourceMediaElement = null;\r\n    }\r\n\r\n    /**\r\n     * Initialise the backend, called in `wavesurfer.createBackend()`\r\n     */\r\n    init() {\r\n        this.setPlaybackRate(this.params.audioRate);\r\n        this.createTimer();\r\n        this.createVolumeNode();\r\n        this.createScriptNode();\r\n        this.createAnalyserNode();\r\n    }\r\n    /**\r\n     * Private method called by both `load` (from url)\r\n     * and `loadElt` (existing media element) methods.\r\n     *\r\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\r\n     * @param {string} preload HTML 5 preload attribute value\r\n     * @private\r\n     */\r\n    _load(media, peaks, preload) {\r\n        super._load(media, peaks, preload);\r\n        this.createMediaElementSource(media);\r\n    }\r\n\r\n    /**\r\n     * Create MediaElementSource node\r\n     *\r\n     * @since 3.2.0\r\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\r\n     */\r\n    createMediaElementSource(mediaElement) {\r\n        this.sourceMediaElement = this.ac.createMediaElementSource(\r\n            mediaElement\r\n        );\r\n        this.sourceMediaElement.connect(this.analyser);\r\n    }\r\n\r\n    play(start, end) {\r\n        this.resumeAudioContext();\r\n        return super.play(start, end);\r\n    }\r\n\r\n    /**\r\n     * This is called when wavesurfer is destroyed\r\n     *\r\n     */\r\n    destroy() {\r\n        super.destroy();\r\n\r\n        this.destroyWebAudio();\r\n    }\r\n}\r\n","import * as util from './util';\r\nimport MultiCanvas from './drawer.multicanvas';\r\nimport WebAudio from './webaudio';\r\nimport MediaElement from './mediaelement';\r\nimport PeakCache from './peakcache';\r\nimport MediaElementWebAudio from './mediaelement-webaudio';\r\n\r\n/*\r\n * This work is licensed under a BSD-3-Clause License.\r\n */\r\n\r\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\r\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\r\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\r\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\r\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\r\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\r\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\r\n\r\n/**\r\n * @typedef {Object} WavesurferParams\r\n * @property {AudioContext} audioContext=null Use your own previously\r\n * initialized AudioContext or leave blank.\r\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\r\n * slower.\r\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\r\n * initialized ScriptProcessorNode or leave blank.\r\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\r\n * waveform on current progress\r\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\r\n * waveform is centered\r\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\r\n * center waveform on current progress\r\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\r\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\r\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\r\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\r\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\r\n * also with audio with big duration. For example:\r\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\r\n *   wavesurfer.play();\r\n *   wavesurfer.setFilter(customFilter);\r\n * `\r\n * @property {string} backgroundColor=null Change background color of the\r\n * waveform container.\r\n * @property {number} barHeight=1 The height of the wave bars.\r\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\r\n * @property {number} barGap=null The optional spacing between bars of the wave,\r\n * if not provided will be calculated in legacy format.\r\n * @property {number} barWidth=null Draw the waveform using bars.\r\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\r\n * eliminating waveform gaps\r\n * @property {boolean} closeAudioContext=false Close and nullify all audio\r\n * contexts when the destroy method is called.\r\n * @property {!string|HTMLElement} container CSS selector or HTML element where\r\n * the waveform should be drawn. This is the only required parameter.\r\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\r\n * the playhead position.\r\n * @property {number} cursorWidth=1 Measured in pixels.\r\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\r\n * attributes.\r\n * @property {number} duration=null Optional audio length so pre-rendered peaks\r\n * can be display immediately for example.\r\n * @property {boolean} fillParent=true Whether to fill the entire container or\r\n * draw only according to `minPxPerSec`.\r\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\r\n * when zooming to get a more detailed waveform.\r\n * @property {number} height=128 The height of the waveform. Measured in\r\n * pixels.\r\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\r\n * scrollbar when one would normally be shown.\r\n * @property {boolean} hideCursor=false Whether to hide the mouse cursor\r\n * when one would normally be shown by default.\r\n * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\r\n * when using the `WebAudio` backend.\r\n * @property {boolean} interact=true Whether the mouse interaction will be\r\n * enabled at initialization. You can switch this parameter at any time later\r\n * on.\r\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\r\n * looping of selected regions\r\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\r\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\r\n * even integer). If the waveform is longer than this value, additional canvases\r\n * will be used to render the waveform, which is useful for very large waveforms\r\n * that may be too wide for browsers to draw on a single canvas.\r\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\r\n * this enables the native controls for the media element\r\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\r\n * `'audio'|'video'` ('video' only for `MediaElement`)\r\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\r\n * audio.\r\n * @property {boolean} normalize=false If true, normalize by the maximum peak\r\n * instead of 1.0.\r\n * @property {boolean} partialRender=false Use the PeakCache to improve\r\n * rendering speed of large waveforms\r\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\r\n * calculate display\r\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\r\n * register during instantiation, they will be directly initialised unless they\r\n * are added with the `deferInit` property set to true.\r\n * @property {string} progressColor='#555' The fill color of the part of the\r\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\r\n * the progress wave is not rendered at all.\r\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\r\n * media element in the DOM when the player is destroyed. This is useful when\r\n * reusing an existing media element via the `loadMediaElement` method.\r\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\r\n * renderer.\r\n * @property {boolean|number} responsive=false If set to `true` resize the\r\n * waveform, when the window is resized. This is debounced with a `100ms`\r\n * timeout by default. If this parameter is a number it represents that timeout.\r\n * @property {boolean} rtl=false If set to `true`, renders waveform from\r\n * right-to-left.\r\n * @property {boolean} scrollParent=false Whether to scroll the container with a\r\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\r\n * (see fillParent).\r\n * @property {number} skipLength=2 Number of seconds to skip with the\r\n * skipForward() and skipBackward() methods.\r\n * @property {boolean} splitChannels=false Render with separate waveforms for\r\n * the channels of the audio\r\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\r\n * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\r\n * @property {string} waveColor='#999' The fill color of the waveform after the\r\n * cursor.\r\n * @property {object} xhr={} XHR options. For example:\r\n * `let xhr = {\r\n *     cache: 'default',\r\n *     mode: 'cors',\r\n *     method: 'GET',\r\n *     credentials: 'same-origin',\r\n *     redirect: 'follow',\r\n *     referrer: 'client',\r\n *     requestHeaders: [\r\n *         {\r\n *             key: 'Authorization',\r\n *             value: 'my-token'\r\n *         }\r\n *     ]\r\n * };`\r\n */\r\n\r\n/**\r\n * @typedef {Object} PluginDefinition\r\n * @desc The Object used to describe a plugin\r\n * @example wavesurfer.addPlugin(pluginDefinition);\r\n * @property {string} name The name of the plugin, the plugin instance will be\r\n * added as a property to the wavesurfer instance under this name\r\n * @property {?Object} staticProps The properties that should be added to the\r\n * wavesurfer instance as static properties\r\n * @property {?boolean} deferInit Don't initialise plugin\r\n * automatically\r\n * @property {Object} params={} The plugin parameters, they are the first parameter\r\n * passed to the plugin class constructor function\r\n * @property {PluginClass} instance The plugin instance factory, is called with\r\n * the dependency specified in extends. Returns the plugin class.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SplitChannelOptions\r\n * @desc parameters applied when splitChannels option is true\r\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\r\n * @property {object} channelColors={} object describing color for each channel. Example:\r\n * {\r\n *     0: {\r\n *         progressColor: 'green',\r\n *         waveColor: 'pink'\r\n *     },\r\n *     1: {\r\n *         progressColor: 'orange',\r\n *         waveColor: 'purple'\r\n *     }\r\n * }\r\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\r\n * @property {boolean} relativeNormalization=false determines whether\r\n * normalization is done per channel or maintains proportionality between\r\n * channels. Only applied when normalize and splitChannels are both true.\r\n * @since 4.3.0\r\n */\r\n\r\n/**\r\n * @interface PluginClass\r\n *\r\n * @desc This is the interface which is implemented by all plugin classes. Note\r\n * that this only turns into an observer after being passed through\r\n * `wavesurfer.addPlugin`.\r\n *\r\n * @extends {Observer}\r\n */\r\nclass PluginClass {\r\n    /**\r\n     * Plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * It returns a `PluginDefinition` object representing the plugin.\r\n     *\r\n     * @param {Object} params={} The plugin params (specific to the plugin)\r\n     */\r\n    create(params) {}\r\n    /**\r\n     * Construct the plugin\r\n     *\r\n     * @param {Object} params={} The plugin params (specific to the plugin)\r\n     * @param {Object} ws The wavesurfer instance\r\n     */\r\n    constructor(params, ws) {}\r\n    /**\r\n     * Initialise the plugin\r\n     *\r\n     * Start doing something. This is called by\r\n     * `wavesurfer.initPlugin(pluginName)`\r\n     */\r\n    init() {}\r\n    /**\r\n     * Destroy the plugin instance\r\n     *\r\n     * Stop doing something. This is called by\r\n     * `wavesurfer.destroyPlugin(pluginName)`\r\n     */\r\n    destroy() {}\r\n}\r\n\r\n/**\r\n * WaveSurfer core library class\r\n *\r\n * @extends {Observer}\r\n * @example\r\n * const params = {\r\n *   container: '#waveform',\r\n *   waveColor: 'violet',\r\n *   progressColor: 'purple'\r\n * };\r\n *\r\n * // initialise like this\r\n * const wavesurfer = WaveSurfer.create(params);\r\n *\r\n * // or like this ...\r\n * const wavesurfer = new WaveSurfer(params);\r\n * wavesurfer.init();\r\n *\r\n * // load audio file\r\n * wavesurfer.load('example/media/demo.wav');\r\n */\r\nexport default class WaveSurfer extends util.Observer {\r\n    /** @private */\r\n    defaultParams = {\r\n        audioContext: null,\r\n        audioScriptProcessor: null,\r\n        audioRate: 1,\r\n        autoCenter: true,\r\n        autoCenterRate: 5,\r\n        autoCenterImmediately: false,\r\n        backend: 'WebAudio',\r\n        backgroundColor: null,\r\n        barHeight: 1,\r\n        barRadius: 0,\r\n        barGap: null,\r\n        barMinHeight: null,\r\n        container: null,\r\n        cursorColor: '#333',\r\n        cursorWidth: 1,\r\n        dragSelection: true,\r\n        drawingContextAttributes: {\r\n            // Boolean that hints the user agent to reduce the latency\r\n            // by desynchronizing the canvas paint cycle from the event\r\n            // loop\r\n            desynchronized: false\r\n        },\r\n        duration: null,\r\n        fillParent: true,\r\n        forceDecode: false,\r\n        height: 128,\r\n        hideScrollbar: false,\r\n        hideCursor: false,\r\n        ignoreSilenceMode: false,\r\n        interact: true,\r\n        loopSelection: true,\r\n        maxCanvasWidth: 4000,\r\n        mediaContainer: null,\r\n        mediaControls: false,\r\n        mediaType: 'audio',\r\n        minPxPerSec: 20,\r\n        normalize: false,\r\n        partialRender: false,\r\n        pixelRatio:\r\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\r\n        plugins: [],\r\n        progressColor: '#555',\r\n        removeMediaElementOnDestroy: true,\r\n        renderer: MultiCanvas,\r\n        responsive: false,\r\n        rtl: false,\r\n        scrollParent: false,\r\n        skipLength: 2,\r\n        splitChannels: false,\r\n        splitChannelsOptions: {\r\n            overlay: false,\r\n            channelColors: {},\r\n            filterChannels: [],\r\n            relativeNormalization: false\r\n        },\r\n        vertical: false,\r\n        waveColor: '#999',\r\n        xhr: {}\r\n    };\r\n\r\n    /** @private */\r\n    backends = {\r\n        MediaElement,\r\n        WebAudio,\r\n        MediaElementWebAudio\r\n    };\r\n\r\n    /**\r\n     * Instantiate this class, call its `init` function and returns it\r\n     *\r\n     * @param {WavesurferParams} params The wavesurfer parameters\r\n     * @return {Object} WaveSurfer instance\r\n     * @example const wavesurfer = WaveSurfer.create(params);\r\n     */\r\n    static create(params) {\r\n        const wavesurfer = new WaveSurfer(params);\r\n        return wavesurfer.init();\r\n    }\r\n\r\n    /**\r\n     * The library version number is available as a static property of the\r\n     * WaveSurfer class\r\n     *\r\n     * @type {String}\r\n     * @example\r\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\r\n     */\r\n    static VERSION = __VERSION__;\r\n\r\n    /**\r\n     * Functions in the `util` property are available as a prototype property to\r\n     * all instances\r\n     *\r\n     * @type {Object}\r\n     * @example\r\n     * const wavesurfer = WaveSurfer.create(params);\r\n     * wavesurfer.util.style(myElement, { background: 'blue' });\r\n     */\r\n    util = util;\r\n\r\n    /**\r\n     * Functions in the `util` property are available as a static property of the\r\n     * WaveSurfer class\r\n     *\r\n     * @type {Object}\r\n     * @example\r\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\r\n     */\r\n    static util = util;\r\n\r\n    /**\r\n     * Initialise wavesurfer instance\r\n     *\r\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\r\n     * @example\r\n     * const wavesurfer = new WaveSurfer(params);\r\n     * @returns {this} Wavesurfer instance\r\n     */\r\n    constructor(params) {\r\n        super();\r\n        /**\r\n         * Extract relevant parameters (or defaults)\r\n         * @private\r\n         */\r\n        this.params = Object.assign({}, this.defaultParams, params);\r\n        this.params.splitChannelsOptions = Object.assign(\r\n            {},\r\n            this.defaultParams.splitChannelsOptions,\r\n            params.splitChannelsOptions\r\n        );\r\n        /** @private */\r\n        this.container =\r\n            'string' == typeof params.container\r\n                ? document.querySelector(this.params.container)\r\n                : this.params.container;\r\n\r\n        if (!this.container) {\r\n            throw new Error('Container element not found');\r\n        }\r\n\r\n        if (this.params.mediaContainer == null) {\r\n            /** @private */\r\n            this.mediaContainer = this.container;\r\n        } else if (typeof this.params.mediaContainer == 'string') {\r\n            /** @private */\r\n            this.mediaContainer = document.querySelector(\r\n                this.params.mediaContainer\r\n            );\r\n        } else {\r\n            /** @private */\r\n            this.mediaContainer = this.params.mediaContainer;\r\n        }\r\n\r\n        if (!this.mediaContainer) {\r\n            throw new Error('Media Container element not found');\r\n        }\r\n\r\n        if (this.params.maxCanvasWidth <= 1) {\r\n            throw new Error('maxCanvasWidth must be greater than 1');\r\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\r\n            throw new Error('maxCanvasWidth must be an even number');\r\n        }\r\n\r\n        if (this.params.rtl === true) {\r\n            if (this.params.vertical === true) {\r\n                util.style(this.container, { transform: 'rotateX(180deg)' });\r\n            } else {\r\n                util.style(this.container, { transform: 'rotateY(180deg)' });\r\n            }\r\n        }\r\n\r\n        if (this.params.backgroundColor) {\r\n            this.setBackgroundColor(this.params.backgroundColor);\r\n        }\r\n\r\n        /**\r\n         * @private Used to save the current volume when muting so we can\r\n         * restore once unmuted\r\n         * @type {number}\r\n         */\r\n        this.savedVolume = 0;\r\n\r\n        /**\r\n         * @private The current muted state\r\n         * @type {boolean}\r\n         */\r\n        this.isMuted = false;\r\n\r\n        /**\r\n         * @private Will hold a list of event descriptors that need to be\r\n         * canceled on subsequent loads of audio\r\n         * @type {Object[]}\r\n         */\r\n        this.tmpEvents = [];\r\n\r\n        /**\r\n         * @private Holds any running audio downloads\r\n         * @type {Observer}\r\n         */\r\n        this.currentRequest = null;\r\n        /** @private */\r\n        this.arraybuffer = null;\r\n        /** @private */\r\n        this.drawer = null;\r\n        /** @private */\r\n        this.backend = null;\r\n        /** @private */\r\n        this.peakCache = null;\r\n\r\n        // cache constructor objects\r\n        if (typeof this.params.renderer !== 'function') {\r\n            throw new Error('Renderer parameter is invalid');\r\n        }\r\n        /**\r\n         * @private The uninitialised Drawer class\r\n         */\r\n        this.Drawer = this.params.renderer;\r\n        /**\r\n         * @private The uninitialised Backend class\r\n         */\r\n        // Back compat\r\n        if (this.params.backend == 'AudioElement') {\r\n            this.params.backend = 'MediaElement';\r\n        }\r\n\r\n        if (\r\n            (this.params.backend == 'WebAudio' ||\r\n                this.params.backend === 'MediaElementWebAudio') &&\r\n            !WebAudio.prototype.supportsWebAudio.call(null)\r\n        ) {\r\n            this.params.backend = 'MediaElement';\r\n        }\r\n        this.Backend = this.backends[this.params.backend];\r\n\r\n        /**\r\n         * @private map of plugin names that are currently initialised\r\n         */\r\n        this.initialisedPluginList = {};\r\n        /** @private */\r\n        this.isDestroyed = false;\r\n\r\n        /**\r\n         * Get the current ready status.\r\n         *\r\n         * @example const isReady = wavesurfer.isReady;\r\n         * @return {boolean}\r\n         */\r\n        this.isReady = false;\r\n\r\n        // responsive debounced event listener. If this.params.responsive is not\r\n        // set, this is never called. Use 100ms or this.params.responsive as\r\n        // timeout for the debounce function.\r\n        let prevWidth = 0;\r\n        this._onResize = util.debounce(\r\n            () => {\r\n                if (\r\n                    prevWidth != this.drawer.wrapper.clientWidth &&\r\n                    !this.params.scrollParent\r\n                ) {\r\n                    prevWidth = this.drawer.wrapper.clientWidth;\r\n                    this.drawer.fireEvent('redraw');\r\n                }\r\n            },\r\n            typeof this.params.responsive === 'number'\r\n                ? this.params.responsive\r\n                : 100\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialise the wave\r\n     *\r\n     * @example\r\n     * var wavesurfer = new WaveSurfer(params);\r\n     * wavesurfer.init();\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    init() {\r\n        this.registerPlugins(this.params.plugins);\r\n        this.createDrawer();\r\n        this.createBackend();\r\n        this.createPeakCache();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\r\n     * this function is called in the init function of wavesurfer\r\n     *\r\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\r\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    registerPlugins(plugins) {\r\n        // first instantiate all the plugins\r\n        plugins.forEach(plugin => this.addPlugin(plugin));\r\n\r\n        // now run the init functions\r\n        plugins.forEach(plugin => {\r\n            // call init function of the plugin if deferInit is falsey\r\n            // in that case you would manually use initPlugins()\r\n            if (!plugin.deferInit) {\r\n                this.initPlugin(plugin.name);\r\n            }\r\n        });\r\n        this.fireEvent('plugins-registered', plugins);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get a map of plugin names that are currently initialised\r\n     *\r\n     * @example wavesurfer.getPlugins();\r\n     * @return {Object} Object with plugin names\r\n     */\r\n    getActivePlugins() {\r\n        return this.initialisedPluginList;\r\n    }\r\n\r\n    /**\r\n     * Add a plugin object to wavesurfer\r\n     *\r\n     * @param {PluginDefinition} plugin A plugin definition\r\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\r\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    addPlugin(plugin) {\r\n        if (!plugin.name) {\r\n            throw new Error('Plugin does not have a name!');\r\n        }\r\n        if (!plugin.instance) {\r\n            throw new Error(\r\n                `Plugin ${plugin.name} does not have an instance property!`\r\n            );\r\n        }\r\n\r\n        // staticProps properties are applied to wavesurfer instance\r\n        if (plugin.staticProps) {\r\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\r\n                /**\r\n                 * Properties defined in a plugin definition's `staticProps` property are added as\r\n                 * staticProps properties of the WaveSurfer instance\r\n                 */\r\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\r\n            });\r\n        }\r\n\r\n        const Instance = plugin.instance;\r\n\r\n        // turn the plugin instance into an observer\r\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\r\n            util.Observer.prototype\r\n        );\r\n        observerPrototypeKeys.forEach(key => {\r\n            Instance.prototype[key] = util.Observer.prototype[key];\r\n        });\r\n\r\n        /**\r\n         * Instantiated plugin classes are added as a property of the wavesurfer\r\n         * instance\r\n         * @type {Object}\r\n         */\r\n        this[plugin.name] = new Instance(plugin.params || {}, this);\r\n        this.fireEvent('plugin-added', plugin.name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialise a plugin\r\n     *\r\n     * @param {string} name A plugin name\r\n     * @emits WaveSurfer#plugin-initialised\r\n     * @example wavesurfer.initPlugin('minimap');\r\n     * @return {this} The wavesurfer instance\r\n     */\r\n    initPlugin(name) {\r\n        if (!this[name]) {\r\n            throw new Error(`Plugin ${name} has not been added yet!`);\r\n        }\r\n        if (this.initialisedPluginList[name]) {\r\n            // destroy any already initialised plugins\r\n            this.destroyPlugin(name);\r\n        }\r\n        this[name].init();\r\n        this.initialisedPluginList[name] = true;\r\n        this.fireEvent('plugin-initialised', name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destroy a plugin\r\n     *\r\n     * @param {string} name A plugin name\r\n     * @emits WaveSurfer#plugin-destroyed\r\n     * @example wavesurfer.destroyPlugin('minimap');\r\n     * @returns {this} The wavesurfer instance\r\n     */\r\n    destroyPlugin(name) {\r\n        if (!this[name]) {\r\n            throw new Error(\r\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\r\n            );\r\n        }\r\n        if (!this.initialisedPluginList[name]) {\r\n            throw new Error(\r\n                `Plugin ${name} is not active and cannot be destroyed!`\r\n            );\r\n        }\r\n        if (typeof this[name].destroy !== 'function') {\r\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\r\n        }\r\n\r\n        this[name].destroy();\r\n        delete this.initialisedPluginList[name];\r\n        this.fireEvent('plugin-destroyed', name);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destroy all initialised plugins. Convenience function to use when\r\n     * wavesurfer is removed\r\n     *\r\n     * @private\r\n     */\r\n    destroyAllPlugins() {\r\n        Object.keys(this.initialisedPluginList).forEach(name =>\r\n            this.destroyPlugin(name)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create the drawer and draw the waveform\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#drawer-created\r\n     */\r\n    createDrawer() {\r\n        this.drawer = new this.Drawer(this.container, this.params);\r\n        this.drawer.init();\r\n        this.fireEvent('drawer-created', this.drawer);\r\n\r\n        if (this.params.responsive !== false) {\r\n            window.addEventListener('resize', this._onResize, true);\r\n            window.addEventListener('orientationchange', this._onResize, true);\r\n        }\r\n\r\n        this.drawer.on('redraw', () => {\r\n            this.drawBuffer();\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n        });\r\n\r\n        // Click-to-seek\r\n        this.drawer.on('click', (e, progress) => {\r\n            setTimeout(() => this.seekTo(progress), 0);\r\n        });\r\n\r\n        // Relay the scroll event from the drawer\r\n        this.drawer.on('scroll', e => {\r\n            if (this.params.partialRender) {\r\n                this.drawBuffer();\r\n            }\r\n            this.fireEvent('scroll', e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create the backend\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#backend-created\r\n     */\r\n    createBackend() {\r\n        if (this.backend) {\r\n            this.backend.destroy();\r\n        }\r\n\r\n        this.backend = new this.Backend(this.params);\r\n        this.backend.init();\r\n        this.fireEvent('backend-created', this.backend);\r\n\r\n        this.backend.on('finish', () => {\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n            this.fireEvent('finish');\r\n        });\r\n        this.backend.on('play', () => this.fireEvent('play'));\r\n        this.backend.on('pause', () => this.fireEvent('pause'));\r\n\r\n        this.backend.on('audioprocess', time => {\r\n            this.drawer.progress(this.backend.getPlayedPercents());\r\n            this.fireEvent('audioprocess', time);\r\n        });\r\n\r\n        // only needed for MediaElement and MediaElementWebAudio backend\r\n        if (\r\n            this.params.backend === 'MediaElement' ||\r\n            this.params.backend === 'MediaElementWebAudio'\r\n        ) {\r\n            this.backend.on('seek', () => {\r\n                this.drawer.progress(this.backend.getPlayedPercents());\r\n            });\r\n\r\n            this.backend.on('volume', () => {\r\n                let newVolume = this.getVolume();\r\n                this.fireEvent('volume', newVolume);\r\n\r\n                if (this.backend.isMuted !== this.isMuted) {\r\n                    this.isMuted = this.backend.isMuted;\r\n                    this.fireEvent('mute', this.isMuted);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the peak cache\r\n     *\r\n     * @private\r\n     */\r\n    createPeakCache() {\r\n        if (this.params.partialRender) {\r\n            this.peakCache = new PeakCache();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the duration of the audio clip\r\n     *\r\n     * @example const duration = wavesurfer.getDuration();\r\n     * @return {number} Duration in seconds\r\n     */\r\n    getDuration() {\r\n        return this.backend.getDuration();\r\n    }\r\n\r\n    /**\r\n     * Get the current playback position\r\n     *\r\n     * @example const currentTime = wavesurfer.getCurrentTime();\r\n     * @return {number} Playback position in seconds\r\n     */\r\n    getCurrentTime() {\r\n        return this.backend.getCurrentTime();\r\n    }\r\n\r\n    /**\r\n     * Set the current play time in seconds.\r\n     *\r\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\r\n     * seconds, 60 means 1 minute\r\n     */\r\n    setCurrentTime(seconds) {\r\n        if (seconds >= this.getDuration()) {\r\n            this.seekTo(1);\r\n        } else {\r\n            this.seekTo(seconds / this.getDuration());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts playback from the current position. Optional start and end\r\n     * measured in seconds can be used to set the range of audio to play.\r\n     *\r\n     * @param {?number} start Position to start at\r\n     * @param {?number} end Position to end at\r\n     * @emits WaveSurfer#interaction\r\n     * @return {Promise} Result of the backend play method\r\n     * @example\r\n     * // play from second 1 to 5\r\n     * wavesurfer.play(1, 5);\r\n     */\r\n    play(start, end) {\r\n        if (this.params.ignoreSilenceMode) {\r\n            // ignores device hardware silence mode\r\n            util.ignoreSilenceMode();\r\n        }\r\n\r\n        this.fireEvent('interaction', () => this.play(start, end));\r\n        return this.backend.play(start, end);\r\n    }\r\n\r\n    /**\r\n     * Set a point in seconds for playback to stop at.\r\n     *\r\n     * @param {number} position Position (in seconds) to stop at\r\n     * @version 3.3.0\r\n     */\r\n    setPlayEnd(position) {\r\n        this.backend.setPlayEnd(position);\r\n    }\r\n\r\n    /**\r\n     * Stops and pauses playback\r\n     *\r\n     * @example wavesurfer.pause();\r\n     * @return {Promise} Result of the backend pause method\r\n     */\r\n    pause() {\r\n        if (!this.backend.isPaused()) {\r\n            return this.backend.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle playback\r\n     *\r\n     * @example wavesurfer.playPause();\r\n     * @return {Promise} Result of the backend play or pause method\r\n     */\r\n    playPause() {\r\n        return this.backend.isPaused() ? this.play() : this.pause();\r\n    }\r\n\r\n    /**\r\n     * Get the current playback state\r\n     *\r\n     * @example const isPlaying = wavesurfer.isPlaying();\r\n     * @return {boolean} False if paused, true if playing\r\n     */\r\n    isPlaying() {\r\n        return !this.backend.isPaused();\r\n    }\r\n\r\n    /**\r\n     * Skip backward\r\n     *\r\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\r\n     * is used\r\n     * @example wavesurfer.skipBackward();\r\n     */\r\n    skipBackward(seconds) {\r\n        this.skip(-seconds || -this.params.skipLength);\r\n    }\r\n\r\n    /**\r\n     * Skip forward\r\n     *\r\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\r\n     * is used\r\n     * @example wavesurfer.skipForward();\r\n     */\r\n    skipForward(seconds) {\r\n        this.skip(seconds || this.params.skipLength);\r\n    }\r\n\r\n    /**\r\n     * Skip a number of seconds from the current position (use a negative value\r\n     * to go backwards).\r\n     *\r\n     * @param {number} offset Amount to skip back or forwards\r\n     * @example\r\n     * // go back 2 seconds\r\n     * wavesurfer.skip(-2);\r\n     */\r\n    skip(offset) {\r\n        const duration = this.getDuration() || 1;\r\n        let position = this.getCurrentTime() || 0;\r\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\r\n        this.seekAndCenter(position / duration);\r\n    }\r\n\r\n    /**\r\n     * Seeks to a position and centers the view\r\n     *\r\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\r\n     * @example\r\n     * // seek and go to the middle of the audio\r\n     * wavesurfer.seekTo(0.5);\r\n     */\r\n    seekAndCenter(progress) {\r\n        this.seekTo(progress);\r\n        this.drawer.recenter(progress);\r\n    }\r\n\r\n    /**\r\n     * Seeks to a position\r\n     *\r\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\r\n     * @emits WaveSurfer#interaction\r\n     * @emits WaveSurfer#seek\r\n     * @example\r\n     * // seek to the middle of the audio\r\n     * wavesurfer.seekTo(0.5);\r\n     */\r\n    seekTo(progress) {\r\n        // return an error if progress is not a number between 0 and 1\r\n        if (\r\n            typeof progress !== 'number' ||\r\n            !isFinite(progress) ||\r\n            progress < 0 ||\r\n            progress > 1\r\n        ) {\r\n            throw new Error(\r\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\r\n            );\r\n        }\r\n        this.fireEvent('interaction', () => this.seekTo(progress));\r\n\r\n        const isWebAudioBackend = this.params.backend === 'WebAudio';\r\n        const paused = this.backend.isPaused();\r\n\r\n        if (isWebAudioBackend && !paused) {\r\n            this.backend.pause();\r\n        }\r\n\r\n        // avoid small scrolls while paused seeking\r\n        const oldScrollParent = this.params.scrollParent;\r\n        this.params.scrollParent = false;\r\n        this.backend.seekTo(progress * this.getDuration());\r\n        this.drawer.progress(progress);\r\n\r\n        if (isWebAudioBackend && !paused) {\r\n            this.backend.play();\r\n        }\r\n\r\n        this.params.scrollParent = oldScrollParent;\r\n        this.fireEvent('seek', progress);\r\n    }\r\n\r\n    /**\r\n     * Stops and goes to the beginning.\r\n     *\r\n     * @example wavesurfer.stop();\r\n     */\r\n    stop() {\r\n        this.pause();\r\n        this.seekTo(0);\r\n        this.drawer.progress(0);\r\n    }\r\n\r\n    /**\r\n     * Sets the ID of the audio device to use for output and returns a Promise.\r\n     *\r\n     * @param {string} deviceId String value representing underlying output\r\n     * device\r\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\r\n     * no errors detected.\r\n     */\r\n    setSinkId(deviceId) {\r\n        return this.backend.setSinkId(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Set the playback volume.\r\n     *\r\n     * @param {number} newVolume A value between 0 and 1, 0 being no\r\n     * volume and 1 being full volume.\r\n     * @emits WaveSurfer#volume\r\n     */\r\n    setVolume(newVolume) {\r\n        this.backend.setVolume(newVolume);\r\n        this.fireEvent('volume', newVolume);\r\n    }\r\n\r\n    /**\r\n     * Get the playback volume.\r\n     *\r\n     * @return {number} A value between 0 and 1, 0 being no\r\n     * volume and 1 being full volume.\r\n     */\r\n    getVolume() {\r\n        return this.backend.getVolume();\r\n    }\r\n\r\n    /**\r\n     * Set the playback rate.\r\n     *\r\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\r\n     * speed, 2 means double speed and so on.\r\n     * @example wavesurfer.setPlaybackRate(2);\r\n     */\r\n    setPlaybackRate(rate) {\r\n        this.backend.setPlaybackRate(rate);\r\n    }\r\n\r\n    /**\r\n     * Get the playback rate.\r\n     *\r\n     * @return {number} The current playback rate.\r\n     */\r\n    getPlaybackRate() {\r\n        return this.backend.getPlaybackRate();\r\n    }\r\n\r\n    /**\r\n     * Toggle the volume on and off. If not currently muted it will save the\r\n     * current volume value and turn the volume off. If currently muted then it\r\n     * will restore the volume to the saved value, and then rest the saved\r\n     * value.\r\n     *\r\n     * @example wavesurfer.toggleMute();\r\n     */\r\n    toggleMute() {\r\n        this.setMute(!this.isMuted);\r\n    }\r\n\r\n    /**\r\n     * Enable or disable muted audio\r\n     *\r\n     * @param {boolean} mute Specify `true` to mute audio.\r\n     * @emits WaveSurfer#volume\r\n     * @emits WaveSurfer#mute\r\n     * @example\r\n     * // unmute\r\n     * wavesurfer.setMute(false);\r\n     * console.log(wavesurfer.getMute()) // logs false\r\n     */\r\n    setMute(mute) {\r\n        // ignore all muting requests if the audio is already in that state\r\n        if (mute === this.isMuted) {\r\n            this.fireEvent('mute', this.isMuted);\r\n            return;\r\n        }\r\n\r\n        if (this.backend.setMute) {\r\n            // Backends such as the MediaElement backend have their own handling\r\n            // of mute, let them handle it.\r\n            this.backend.setMute(mute);\r\n            this.isMuted = mute;\r\n        } else {\r\n            if (mute) {\r\n                // If currently not muted then save current volume,\r\n                // turn off the volume and update the mute properties\r\n                this.savedVolume = this.backend.getVolume();\r\n                this.backend.setVolume(0);\r\n                this.isMuted = true;\r\n                this.fireEvent('volume', 0);\r\n            } else {\r\n                // If currently muted then restore to the saved volume\r\n                // and update the mute properties\r\n                this.backend.setVolume(this.savedVolume);\r\n                this.isMuted = false;\r\n                this.fireEvent('volume', this.savedVolume);\r\n            }\r\n        }\r\n        this.fireEvent('mute', this.isMuted);\r\n    }\r\n\r\n    /**\r\n     * Get the current mute status.\r\n     *\r\n     * @example const isMuted = wavesurfer.getMute();\r\n     * @return {boolean} Current mute status\r\n     */\r\n    getMute() {\r\n        return this.isMuted;\r\n    }\r\n\r\n    /**\r\n     * Get the list of current set filters as an array.\r\n     *\r\n     * Filters must be set with setFilters method first\r\n     *\r\n     * @return {array} List of enabled filters\r\n     */\r\n    getFilters() {\r\n        return this.backend.filters || [];\r\n    }\r\n\r\n    /**\r\n     * Toggles `scrollParent` and redraws\r\n     *\r\n     * @example wavesurfer.toggleScroll();\r\n     */\r\n    toggleScroll() {\r\n        this.params.scrollParent = !this.params.scrollParent;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Toggle mouse interaction\r\n     *\r\n     * @example wavesurfer.toggleInteraction();\r\n     */\r\n    toggleInteraction() {\r\n        this.params.interact = !this.params.interact;\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the waveform after the cursor.\r\n     *\r\n     * @param {?number} channelIdx Optional index of the channel to get its wave color if splitChannels is true\r\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\r\n     */\r\n    getWaveColor(channelIdx = null) {\r\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\r\n            return this.params.splitChannelsOptions.channelColors[channelIdx].waveColor;\r\n        }\r\n        return this.params.waveColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the waveform after the cursor.\r\n     *\r\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\r\n     * @param {?number} channelIdx Optional index of the channel to set its wave color if splitChannels is true\r\n     * @example wavesurfer.setWaveColor('#ddd');\r\n     */\r\n    setWaveColor(color, channelIdx = null) {\r\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\r\n            this.params.splitChannelsOptions.channelColors[channelIdx].waveColor = color;\r\n        } else {\r\n            this.params.waveColor = color;\r\n        }\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the waveform behind the cursor.\r\n     *\r\n     * @param {?number} channelIdx Optional index of the channel to get its progress color if splitChannels is true\r\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\r\n     */\r\n    getProgressColor(channelIdx = null) {\r\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\r\n            return this.params.splitChannelsOptions.channelColors[channelIdx].progressColor;\r\n        }\r\n        return this.params.progressColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the waveform behind the cursor.\r\n     *\r\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\r\n     * @param {?number} channelIdx Optional index of the channel to set its progress color if splitChannels is true\r\n     * @example wavesurfer.setProgressColor('#400');\r\n     */\r\n    setProgressColor(color, channelIdx) {\r\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\r\n            this.params.splitChannelsOptions.channelColors[channelIdx].progressColor = color;\r\n        } else {\r\n            this.params.progressColor = color;\r\n        }\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the background color of the waveform container.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getBackgroundColor() {\r\n        return this.params.backgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Set the background color of the waveform container.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\r\n     */\r\n    setBackgroundColor(color) {\r\n        this.params.backgroundColor = color;\r\n        util.style(this.container, { background: this.params.backgroundColor });\r\n    }\r\n\r\n    /**\r\n     * Get the fill color of the cursor indicating the playhead\r\n     * position.\r\n     *\r\n     * @return {string} A CSS color string.\r\n     */\r\n    getCursorColor() {\r\n        return this.params.cursorColor;\r\n    }\r\n\r\n    /**\r\n     * Set the fill color of the cursor indicating the playhead\r\n     * position.\r\n     *\r\n     * @param {string} color A CSS color string.\r\n     * @example wavesurfer.setCursorColor('#222');\r\n     */\r\n    setCursorColor(color) {\r\n        this.params.cursorColor = color;\r\n        this.drawer.updateCursor();\r\n    }\r\n\r\n    /**\r\n     * Get the height of the waveform.\r\n     *\r\n     * @return {number} Height measured in pixels.\r\n     */\r\n    getHeight() {\r\n        return this.params.height;\r\n    }\r\n\r\n    /**\r\n     * Set the height of the waveform.\r\n     *\r\n     * @param {number} height Height measured in pixels.\r\n     * @example wavesurfer.setHeight(200);\r\n     */\r\n    setHeight(height) {\r\n        this.params.height = height;\r\n        this.drawer.setHeight(height * this.params.pixelRatio);\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Hide channels from being drawn on the waveform if splitting channels.\r\n     *\r\n     * For example, if we want to draw only the peaks for the right stereo channel:\r\n     *\r\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\r\n     * wavesurfer.load('stereo_audio.mp3');\r\n     *\r\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\r\n     *\r\n     * @param {array} channelIndices Channels to be filtered out from drawing.\r\n     * @version 4.0.0\r\n     */\r\n    setFilteredChannels(channelIndices) {\r\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\r\n        this.drawBuffer();\r\n    }\r\n\r\n    /**\r\n     * Get the correct peaks for current wave view-port and render wave\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#redraw\r\n     */\r\n    drawBuffer() {\r\n        const nominalWidth = Math.round(\r\n            this.getDuration() *\r\n                this.params.minPxPerSec *\r\n                this.params.pixelRatio\r\n        );\r\n        const parentWidth = this.drawer.getWidth();\r\n        let width = nominalWidth;\r\n        // always start at 0 after zooming for scrolling : issue redraw left part\r\n        let start = 0;\r\n        let end = Math.max(start + parentWidth, width);\r\n        // Fill container\r\n        if (\r\n            this.params.fillParent &&\r\n            (!this.params.scrollParent || nominalWidth < parentWidth)\r\n        ) {\r\n            width = parentWidth;\r\n            start = 0;\r\n            end = width;\r\n        }\r\n\r\n        let peaks;\r\n        if (this.params.partialRender) {\r\n            const newRanges = this.peakCache.addRangeToPeakCache(\r\n                width,\r\n                start,\r\n                end\r\n            );\r\n            let i;\r\n            for (i = 0; i < newRanges.length; i++) {\r\n                peaks = this.backend.getPeaks(\r\n                    width,\r\n                    newRanges[i][0],\r\n                    newRanges[i][1]\r\n                );\r\n                this.drawer.drawPeaks(\r\n                    peaks,\r\n                    width,\r\n                    newRanges[i][0],\r\n                    newRanges[i][1]\r\n                );\r\n            }\r\n        } else {\r\n            peaks = this.backend.getPeaks(width, start, end);\r\n            this.drawer.drawPeaks(peaks, width, start, end);\r\n        }\r\n        this.fireEvent('redraw', peaks, width);\r\n    }\r\n\r\n    /**\r\n     * Horizontally zooms the waveform in and out. It also changes the parameter\r\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\r\n     * with a falsey parameter will reset the zoom state.\r\n     *\r\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\r\n     * audio, if none is set the waveform returns to unzoomed state\r\n     * @emits WaveSurfer#zoom\r\n     * @example wavesurfer.zoom(20);\r\n     */\r\n    zoom(pxPerSec) {\r\n        if (!pxPerSec) {\r\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\r\n            this.params.scrollParent = false;\r\n        } else {\r\n            this.params.minPxPerSec = pxPerSec;\r\n            this.params.scrollParent = true;\r\n        }\r\n\r\n        this.drawBuffer();\r\n        this.drawer.progress(this.backend.getPlayedPercents());\r\n\r\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\r\n        this.fireEvent('zoom', pxPerSec);\r\n    }\r\n\r\n    /**\r\n     * Decode buffer and load\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arraybuffer Buffer to process\r\n     */\r\n    loadArrayBuffer(arraybuffer) {\r\n        this.decodeArrayBuffer(arraybuffer, data => {\r\n            if (!this.isDestroyed) {\r\n                this.loadDecodedBuffer(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Directly load an externally decoded AudioBuffer\r\n     *\r\n     * @private\r\n     * @param {AudioBuffer} buffer Buffer to process\r\n     * @emits WaveSurfer#ready\r\n     */\r\n    loadDecodedBuffer(buffer) {\r\n        this.backend.load(buffer);\r\n        this.drawBuffer();\r\n        this.isReady = true;\r\n        this.fireEvent('ready');\r\n    }\r\n\r\n    /**\r\n     * Loads audio data from a Blob or File object\r\n     *\r\n     * @param {Blob|File} blob Audio data\r\n     * @example\r\n     */\r\n    loadBlob(blob) {\r\n        // Create file reader\r\n        const reader = new FileReader();\r\n        reader.addEventListener('progress', e => this.onProgress(e));\r\n        reader.addEventListener('load', e =>\r\n            this.loadArrayBuffer(e.target.result)\r\n        );\r\n        reader.addEventListener('error', () =>\r\n            this.fireEvent('error', 'Error reading file')\r\n        );\r\n        reader.readAsArrayBuffer(blob);\r\n        this.empty();\r\n    }\r\n\r\n    /**\r\n     * Loads audio and re-renders the waveform.\r\n     *\r\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\r\n     * audio element with the audio\r\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\r\n     * the audio to render the waveform if this is specified\r\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\r\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\r\n     * @param {?number} duration The duration of the audio. This is used to\r\n     * render the peaks data in the correct size for the audio duration (as\r\n     * befits the current `minPxPerSec` and zoom value) without having to decode\r\n     * the audio.\r\n     * @returns {void}\r\n     * @throws Will throw an error if the `url` argument is empty.\r\n     * @example\r\n     * // uses fetch or media element to load file (depending on backend)\r\n     * wavesurfer.load('http://example.com/demo.wav');\r\n     *\r\n     * // setting preload attribute with media element backend and supplying\r\n     * // peaks\r\n     * wavesurfer.load(\r\n     *   'http://example.com/demo.wav',\r\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\r\n     *   true\r\n     * );\r\n     */\r\n    load(url, peaks, preload, duration) {\r\n        if (!url) {\r\n            throw new Error('url parameter cannot be empty');\r\n        }\r\n        this.empty();\r\n        if (preload) {\r\n            // check whether the preload attribute will be usable and if not log\r\n            // a warning listing the reasons why not and nullify the variable\r\n            const preloadIgnoreReasons = {\r\n                \"Preload is not 'auto', 'none' or 'metadata'\":\r\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\r\n                'Peaks are not provided': !peaks,\r\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\r\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\r\n                        this.params.backend\r\n                    ) === -1,\r\n                'Url is not of type string': typeof url !== 'string'\r\n            };\r\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\r\n                reason => preloadIgnoreReasons[reason]\r\n            );\r\n            if (activeReasons.length) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\r\n                        activeReasons.join('\\n\\t- ')\r\n                );\r\n                // stop invalid values from being used\r\n                preload = null;\r\n            }\r\n        }\r\n\r\n        // loadBuffer(url, peaks, duration) requires that url is a string\r\n        // but users can pass in a HTMLMediaElement to WaveSurfer\r\n        if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\r\n            url = url.src;\r\n        }\r\n\r\n        switch (this.params.backend) {\r\n            case 'WebAudio':\r\n                return this.loadBuffer(url, peaks, duration);\r\n            case 'MediaElement':\r\n            case 'MediaElementWebAudio':\r\n                return this.loadMediaElement(url, peaks, preload, duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads audio using Web Audio buffer backend.\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#waveform-ready\r\n     * @param {string} url URL of audio file\r\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\r\n     * @param {?number} duration Optional duration of audio file\r\n     * @returns {void}\r\n     */\r\n    loadBuffer(url, peaks, duration) {\r\n        const load = action => {\r\n            if (action) {\r\n                this.tmpEvents.push(this.once('ready', action));\r\n            }\r\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\r\n        };\r\n\r\n        if (peaks) {\r\n            this.backend.setPeaks(peaks, duration);\r\n            this.drawBuffer();\r\n            this.fireEvent('waveform-ready');\r\n            this.tmpEvents.push(this.once('interaction', load));\r\n        } else {\r\n            return load();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Either create a media element, or load an existing media element.\r\n     *\r\n     * @private\r\n     * @emits WaveSurfer#waveform-ready\r\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\r\n     * existing HTML5 Audio/Video Element\r\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\r\n     * dependency\r\n     * @param {?boolean} preload Set to true if the preload attribute of the\r\n     * audio element should be enabled\r\n     * @param {?number} duration Optional duration of audio file\r\n     */\r\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\r\n        let url = urlOrElt;\r\n\r\n        if (typeof urlOrElt === 'string') {\r\n            this.backend.load(url, this.mediaContainer, peaks, preload);\r\n        } else {\r\n            const elt = urlOrElt;\r\n            this.backend.loadElt(elt, peaks);\r\n\r\n            // If peaks are not provided,\r\n            // url = element.src so we can get peaks with web audio\r\n            url = elt.src;\r\n        }\r\n\r\n        this.tmpEvents.push(\r\n            this.backend.once('canplay', () => {\r\n                // ignore when backend was already destroyed\r\n                if (!this.backend.destroyed) {\r\n                    this.drawBuffer();\r\n                    this.isReady = true;\r\n                    this.fireEvent('ready');\r\n                }\r\n            }),\r\n            this.backend.once('error', err => this.fireEvent('error', err))\r\n        );\r\n\r\n        // If peaks are provided, render them and fire the `waveform-ready` event.\r\n        if (peaks) {\r\n            this.backend.setPeaks(peaks, duration);\r\n            this.drawBuffer();\r\n            this.fireEvent('waveform-ready');\r\n        }\r\n\r\n        // If no pre-decoded peaks are provided, or are provided with\r\n        // forceDecode flag, attempt to download the audio file and decode it\r\n        // with Web Audio.\r\n        if (\r\n            (!peaks || this.params.forceDecode) &&\r\n            this.backend.supportsWebAudio()\r\n        ) {\r\n            this.getArrayBuffer(url, arraybuffer => {\r\n                this.decodeArrayBuffer(arraybuffer, buffer => {\r\n                    this.backend.buffer = buffer;\r\n                    this.backend.setPeaks(null);\r\n                    this.drawBuffer();\r\n                    this.fireEvent('waveform-ready');\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decode an array buffer and pass data to a callback\r\n     *\r\n     * @private\r\n     * @param {Object} arraybuffer The array buffer to decode\r\n     * @param {function} callback The function to call on complete\r\n     */\r\n    decodeArrayBuffer(arraybuffer, callback) {\r\n        if (!this.isDestroyed) {\r\n            this.arraybuffer = arraybuffer;\r\n            this.backend.decodeArrayBuffer(\r\n                arraybuffer,\r\n                data => {\r\n                    // Only use the decoded data if we haven't been destroyed or\r\n                    // another decode started in the meantime\r\n                    if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\r\n                        callback(data);\r\n                        this.arraybuffer = null;\r\n                    }\r\n                },\r\n                () => this.fireEvent('error', 'Error decoding audiobuffer')\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load an array buffer using fetch and pass the result to a callback\r\n     *\r\n     * @param {string} url The URL of the file object\r\n     * @param {function} callback The function to call on complete\r\n     * @returns {util.fetchFile} fetch call\r\n     * @private\r\n     */\r\n    getArrayBuffer(url, callback) {\r\n        let options = Object.assign(\r\n            {\r\n                url: url,\r\n                responseType: 'arraybuffer'\r\n            },\r\n            this.params.xhr\r\n        );\r\n        const request = util.fetchFile(options);\r\n\r\n        this.currentRequest = request;\r\n\r\n        this.tmpEvents.push(\r\n            request.on('progress', e => {\r\n                this.onProgress(e);\r\n            }),\r\n            request.on('success', data => {\r\n                callback(data);\r\n                this.currentRequest = null;\r\n            }),\r\n            request.on('error', e => {\r\n                this.fireEvent('error', e);\r\n                this.currentRequest = null;\r\n            })\r\n        );\r\n\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * Called while the audio file is loading\r\n     *\r\n     * @private\r\n     * @param {Event} e Progress event\r\n     * @emits WaveSurfer#loading\r\n     */\r\n    onProgress(e) {\r\n        let percentComplete;\r\n        if (e.lengthComputable) {\r\n            percentComplete = e.loaded / e.total;\r\n        } else {\r\n            // Approximate progress with an asymptotic\r\n            // function, and assume downloads in the 1-3 MB range.\r\n            percentComplete = e.loaded / (e.loaded + 1000000);\r\n        }\r\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\r\n    }\r\n\r\n    /**\r\n     * Exports PCM data into a JSON array and optionally opens in a new window\r\n     * as valid JSON Blob instance.\r\n     *\r\n     * @param {number} length=1024 The scale in which to export the peaks\r\n     * @param {number} accuracy=10000\r\n     * @param {?boolean} noWindow Set to true to disable opening a new\r\n     * window with the JSON\r\n     * @param {number} start Start index\r\n     * @param {number} end End index\r\n     * @return {Promise} Promise that resolves with array of peaks\r\n     */\r\n    exportPCM(length, accuracy, noWindow, start, end) {\r\n        length = length || 1024;\r\n        start = start || 0;\r\n        accuracy = accuracy || 10000;\r\n        noWindow = noWindow || false;\r\n        const peaks = this.backend.getPeaks(length, start, end);\r\n        const arr = [].map.call(\r\n            peaks,\r\n            val => Math.round(val * accuracy) / accuracy\r\n        );\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (!noWindow){\r\n                const blobJSON = new Blob(\r\n                    [JSON.stringify(arr)],\r\n                    {type: 'application/json;charset=utf-8'}\r\n                );\r\n                const objURL = URL.createObjectURL(blobJSON);\r\n                window.open(objURL);\r\n                URL.revokeObjectURL(objURL);\r\n            }\r\n            resolve(arr);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Save waveform image as data URI.\r\n     *\r\n     * The default format is `'image/png'`. Other supported types are\r\n     * `'image/jpeg'` and `'image/webp'`.\r\n     *\r\n     * @param {string} format='image/png' A string indicating the image format.\r\n     * The default format type is `'image/png'`.\r\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\r\n     * quality to use for image formats that use lossy compression such as\r\n     * `'image/jpeg'`` and `'image/webp'`.\r\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\r\n     * or 'blob'.\r\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\r\n     * a single data URL or an array of data URLs, one for each canvas. When using\r\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\r\n     * instances, one for each canvas.\r\n     */\r\n    exportImage(format, quality, type) {\r\n        if (!format) {\r\n            format = 'image/png';\r\n        }\r\n        if (!quality) {\r\n            quality = 1;\r\n        }\r\n        if (!type) {\r\n            type = 'dataURL';\r\n        }\r\n\r\n        return this.drawer.getImage(format, quality, type);\r\n    }\r\n\r\n    /**\r\n     * Cancel any fetch request currently in progress\r\n     */\r\n    cancelAjax() {\r\n        if (this.currentRequest && this.currentRequest.controller) {\r\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\r\n            // See: Wavesurfer issue #2042\r\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\r\n            if (this.currentRequest._reader) {\r\n                // Ignoring exceptions thrown by call to cancel()\r\n                this.currentRequest._reader.cancel().catch(err => {});\r\n            }\r\n\r\n            this.currentRequest.controller.abort();\r\n            this.currentRequest = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    clearTmpEvents() {\r\n        this.tmpEvents.forEach(e => e.un());\r\n    }\r\n\r\n    /**\r\n     * Display empty waveform.\r\n     */\r\n    empty() {\r\n        if (!this.backend.isPaused()) {\r\n            this.stop();\r\n            this.backend.disconnectSource();\r\n        }\r\n        this.isReady = false;\r\n        this.cancelAjax();\r\n        this.clearTmpEvents();\r\n\r\n        // empty drawer\r\n        this.drawer.progress(0);\r\n        this.drawer.setWidth(0);\r\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\r\n    }\r\n\r\n    /**\r\n     * Remove events, elements and disconnect WebAudio nodes.\r\n     *\r\n     * @emits WaveSurfer#destroy\r\n     */\r\n    destroy() {\r\n        this.destroyAllPlugins();\r\n        this.fireEvent('destroy');\r\n        this.cancelAjax();\r\n        this.clearTmpEvents();\r\n        this.unAll();\r\n        if (this.params.responsive !== false) {\r\n            window.removeEventListener('resize', this._onResize, true);\r\n            window.removeEventListener(\r\n                'orientationchange',\r\n                this._onResize,\r\n                true\r\n            );\r\n        }\r\n        if (this.backend) {\r\n            this.backend.destroy();\r\n            // clears memory usage\r\n            this.backend = null;\r\n        }\r\n        if (this.drawer) {\r\n            this.drawer.destroy();\r\n        }\r\n        this.isDestroyed = true;\r\n        this.isReady = false;\r\n        this.arraybuffer = null;\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","debounce","func","wait","immediate","timeout","args","context","timestamp","result","later","last","Date","now","setTimeout","apply","debounced","this","arguments","callNow","clear","clearTimeout","flush","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","getId","prefix","Math","random","toString","substring","max","values","largest","Infinity","keys","forEach","i","min","smallest","Number","absMax","utilMax","utilmin","Observer","constructor","_disabledEventEmissions","handlers","on","event","fn","push","name","callback","un","e","length","splice","unAll","once","handler","setDisabledEventEmissions","eventNames","_isDisabledEventEmission","includes","fireEvent","style","el","styles","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","element","bind","frame","reqAnimationFrame","preventClickHandler","stopPropagation","document","body","removeEventListener","preventClick","addEventListener","ProgressHandler","instance","contentLength","response","_reader","getReader","total","parseInt","loaded","start","controller","read","then","done","onProgress","lengthComputable","close","byteLength","enqueue","catch","error","fetchFile","options","Error","url","fetchHeaders","Headers","fetchRequest","Request","AbortController","requestHeaders","header","append","responseType","fetchOptions","method","headers","mode","credentials","cache","redirect","referrer","signal","fetch","progressAvailable","Response","ReadableStream","errMsg","ok","arrayBuffer","json","blob","text","status","clamp","val","verticalPropMap","width","height","overflowX","overflowY","clientWidth","clientHeight","clientX","clientY","scrollWidth","scrollLeft","offsetLeft","offsetTop","offsetHeight","offsetWidth","left","right","top","bottom","borderRightStyle","borderRightWidth","borderRightColor","mapProp","vertical","isProxy","withOrientation","target","Proxy","receiver","canvas","getBoundingClientRect","getContext","set","ignoreSilenceMode","tmp","createElement","innerHTML","audioSilentMode","children","item","src","preload","type","disableRemotePlayback","play","remove","Drawer","util","container","params","super","pixelRatio","lastPos","wrapper","createWrapper","appendChild","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","cursor","hideCursor","hideScrollbar","setupWrapperEvents","handleEvent","noPrevent","preventDefault","targetTouches","bbox","nominalWidth","parentWidth","getWidth","progressPixels","getProgressPixels","progress","wrapperBbox","rtl","orientedEvent","scrollbarHeight","interact","drawPeaks","peaks","end","setWidth","clearWave","barWidth","drawBars","drawWave","resetScroll","recenter","percent","recenterOnPosition","half","maxScroll","offset","rate","autoCenterRate","getScrollX","x","round","newWidth","updateSize","setHeight","minPxDelta","pos","autoCenter","newPos","autoCenterImmediately","updateProgress","destroy","parentNode","domElement","removeChild","updateCursor","channelIndex","CanvasEntry","wave","waveCtx","progressCtx","id","toLowerCase","canvasContextAttributes","initWave","initProgress","updateDimensions","elementWidth","totalWidth","elementSize","hasProgressCanvas","clearRect","setFillStyles","waveColor","progressColor","fillStyle","getFillStyle","ctx","color","CanvasGradient","waveGradient","createLinearGradient","index","addColorStop","applyCanvasTransforms","setTransform","fillRects","y","radius","fillRectToContext","drawRoundedRect","fillRect","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","drawLines","absmax","halfH","offsetY","drawLineToContext","first","canvasStart","canvasEnd","scale","halfOffset","absmaxHalf","peak","h","halfPixel","j","getImage","format","quality","Promise","resolve","toBlob","toDataURL","MultiCanvas","maxCanvasWidth","maxCanvasElementWidth","canvases","progressWave","EntryClass","drawingContextAttributes","overlap","ceil","barRadius","init","createElements","zIndex","overflow","boxSizing","pointerEvents","addCanvas","cursorWidth","cursorColor","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","entry","leftOffset","lastEntry","parentElement","pop","prepareDraw","hasMinVals","ch","peakIndexScale","bar","step","barGap","peakIndex","peakIndexRange","floor","peakIndexEnd","newPeak","abs","barMinHeight","reflectedPeaks","len","drawLine","splitChannelsOptions","channelColors","startCanvas","endCanvas","intersection","x1","y1","x2","y2","hideChannel","splitChannels","filterChannels","drawIndex","normalizedMax","Array","channels","filteredChannels","filter","c","overallAbsMax","overlay","relativeNormalization","map","channelPeaks","indexOf","barHeight","normalize","some","all","images","PLAYING","PAUSED","FINISHED","WebAudio","audioContext","offlineAudioContext","stateBehaviors","addOnAudioProcess","getPlayedPercents","duration","getDuration","getCurrentTime","startPosition","getPlayedTime","removeOnAudioProcess","supportsWebAudio","AudioContext","webkitAudioContext","getAudioContext","WaveSurferAudioContext","getOfflineAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","ac","lastPlay","currentTime","scheduledPause","states","create","buffer","filters","gainNode","mergedPeaks","offlineAc","playbackRate","analyser","scriptNode","source","splitPeaks","state","explicitDuration","destroyed","createVolumeNode","createScriptNode","createAnalyserNode","setState","setPlaybackRate","audioRate","setLength","disconnectFilters","disconnect","connect","setFilter","setFilters","reduce","prev","curr","audioScriptProcessor","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","time","pause","createAnalyser","createGain","createGainNode","setSinkId","deviceId","audio","Audio","reject","autoplay","dest","createMediaStreamDestination","srcObject","stream","setVolume","gain","setValueAtTime","getVolume","decodeArrayBuffer","arraybuffer","errback","decodeAudioData","data","err","setPeaks","numberOfChannels","getPeaks","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","disconnectSource","destroyWebAudio","closeAudioContext","isPaused","load","createSource","createBufferSource","noteGrainOn","stop","noteOff","resumeAudioContext","resume","seekTo","adjustedTime","getPlaybackRate","setPlayEnd","MediaElement","media","paused","volume","mediaType","elementPosition","isMuted","onPlayEnd","mediaListeners","createTimer","_setupMediaListeners","canplay","ended","seeked","volumechange","muted","onAudioProcess","controls","mediaControls","prevMedia","querySelector","_load","loadElt","elt","HTMLMediaElement","seekable","isNaN","clearPlayEnd","promise","_onPlayEnd","setMute","removeMediaElementOnDestroy","PeakCache","clearPeakCache","peakCacheRanges","peakCacheLength","addRangeToPeakCache","uncachedRanges","arr","concat","sort","b","uncachedRangePairs","getCacheRanges","peakCacheRangePairs","MediaElementWebAudio","sourceMediaElement","createMediaElementSource","mediaElement","WaveSurfer","defaultParams","backend","backgroundColor","dragSelection","desynchronized","forceDecode","loopSelection","mediaContainer","minPxPerSec","partialRender","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","renderer","responsive","skipLength","xhr","backends","__VERSION__","assign","transform","setBackgroundColor","savedVolume","tmpEvents","currentRequest","drawer","peakCache","Backend","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","getActivePlugins","staticProps","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","destroyAllPlugins","drawBuffer","newVolume","setCurrentTime","seconds","playPause","isPlaying","skipBackward","skip","skipForward","seekAndCenter","isFinite","isWebAudioBackend","oldScrollParent","toggleMute","mute","getMute","getFilters","toggleScroll","toggleInteraction","getWaveColor","channelIdx","setWaveColor","getProgressColor","setProgressColor","getBackgroundColor","background","getCursorColor","setCursorColor","getHeight","setFilteredChannels","channelIndices","newRanges","zoom","pxPerSec","loadArrayBuffer","loadDecodedBuffer","loadBlob","reader","FileReader","readAsArrayBuffer","empty","preloadIgnoreReasons","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","action","getArrayBuffer","urlOrElt","request","percentComplete","exportPCM","accuracy","noWindow","blobJSON","Blob","JSON","stringify","objURL","URL","createObjectURL","open","revokeObjectURL","exportImage","cancelAjax","cancel","abort","clearTmpEvents"],"sourceRoot":""}